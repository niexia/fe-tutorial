import{_ as s,r as n,o as a,c as l,a as p,b as o,d as e,e as c}from"./app.a6773dcb.js";const t=JSON.parse('{"title":"执行环境和执行栈","description":"","frontmatter":{},"headers":[{"level":2,"title":"执行环境","slug":"执行环境","link":"#执行环境","children":[{"level":3,"title":"执行环境类型","slug":"执行环境类型","link":"#执行环境类型","children":[]}]},{"level":2,"title":"执行栈","slug":"执行栈","link":"#执行栈","children":[]},{"level":2,"title":"创建执行环境","slug":"创建执行环境","link":"#创建执行环境","children":[{"level":3,"title":"创建阶段","slug":"创建阶段","link":"#创建阶段","children":[]},{"level":3,"title":"变量环境","slug":"变量环境","link":"#变量环境","children":[]},{"level":3,"title":"执行阶段","slug":"执行阶段","link":"#执行阶段","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"javaScript/programming-language/excution-env-and-stack.md"}'),r={name:"javaScript/programming-language/excution-env-and-stack.md"},D=o("h1",{id:"执行环境和执行栈",tabindex:"-1"},[e("执行环境和执行栈 "),o("a",{class:"header-anchor",href:"#执行环境和执行栈","aria-hidden":"true"},"#")],-1),y=c('<p>理解执行环境（也叫执行上下文）有助于我们理解其他 JS 的概念，例如提升机制、作用域和闭包等。</p><h2 id="执行环境" tabindex="-1">执行环境 <a class="header-anchor" href="#执行环境" aria-hidden="true">#</a></h2><p>执行环境（也叫执行上下文）是 JS 中最为重要的一个概念。执行环境定义了变量，或者是函数有权访问的其他数据，决定了它们各自的行为。每个执行环境有一个与之关联的<strong>变量对象</strong>（variable object），执行环境中定义的变量和函数都保存在这个对象中。虽然我们在代码里无法直接访问，但是解析器在处理数据的时候会使用它。</p><p>当某个执行环境中所有代码执行完毕之后，该上下文就会被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退出，例如关闭网页或浏览器，才会销毁）。</p><h3 id="执行环境类型" tabindex="-1">执行环境类型 <a class="header-anchor" href="#执行环境类型" aria-hidden="true">#</a></h3><p>执行环境有三种类型：</p><ol><li>全局执行环境</li></ol><p>这是默认的，也是最基础的执行环境，也是最外围的一个执行环境。不同的宿主环境中，表示执行环境的对象也不一样，在 Web 浏览器对应的是 <code>window</code> 对象。</p><ol start="2"><li>函数执行环境</li></ol><p>每个函数都有自己的执行环境。当调用执行一个函数时，就会为该函数创建一个执行环境，然后推入一个<strong>栈</strong>中。而在执行之后，栈将其上下文弹出，把控制权返回给之前的执行环境。一个程序可以存在任意数量的函数执行环境。</p><ol start="3"><li>Eval 函数执行环境</li></ol><p>运行在 <code>eval</code> 函数中的代码也获得自己的执行环境，<code>eval</code> 并不常用，它会影响执行效率。</p><h2 id="执行栈" tabindex="-1">执行栈 <a class="header-anchor" href="#执行栈" aria-hidden="true">#</a></h2><p>执行栈，也叫调用栈，用于存储代码执行期间创建的所有执行环境。</p><p>当 JavaScript 引擎首次读取你的脚本时，它会创建一个全局执行环境并将其推入当前的执行栈。每当发生一个函数调用，引擎都会为该函数创建一个新的执行环境并将其推到当前执行栈的顶端。</p><p>引擎会运行执行环境在执行栈顶端的函数，当此函数运行完成后，其对应的执行环境将会从执行栈中弹出，上下文控制权将移到当前执行栈的下一个执行环境。</p><p>看一个样例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">first</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Inside first function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">second</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Again inside first function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">second</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Inside second function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">first</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Inside Global Execution Context</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre></div><p><img src="/fe-tutorial/assets/javascript-callStack.56f4f166.png" alt="call-stack"></p><p>当上述代码在浏览器中加载时，JavaScript 引擎会创建一个全局执行环境并且将它推入当前的执行栈。当调用 <code>first()</code> 函数时，JavaScript 引擎为该函数创建了一个新的执行环境并将其推到当前执行栈的顶端。</p><p>当在 <code>first()</code> 函数中调用 <code>second()</code> 函数时，Javascript 引擎为该函数创建了一个新的执行环境并将其推到当前执行栈的顶端。当 <code>second()</code> 函数执行完成后，它的执行环境从当前执行栈中弹出，上下文控制权将移到当前执行栈的下一个执行环境，即 <code>first()</code> 函数的执行环境。</p><p>当 <code>first()</code> 函数执行完成后，它的执行环境从当前执行栈中弹出，上下文控制权将移到全局执行环境。一旦所有代码执行完毕，Javascript 引擎把全局执行环境从执行栈中移除。</p><h2 id="创建执行环境" tabindex="-1">创建执行环境 <a class="header-anchor" href="#创建执行环境" aria-hidden="true">#</a></h2><p>到目前为止，已经知道 JavaScript 是如何管理执行环境的了，接下来看一下 JavaScript 是如何创建执行环境的。</p><p>执行环境分两个阶段：<strong>创建阶段</strong>和<strong>执行阶段</strong>。</p><h3 id="创建阶段" tabindex="-1">创建阶段 <a class="header-anchor" href="#创建阶段" aria-hidden="true">#</a></h3><p>代码没有执行前都属于这个阶段，在这个阶段总共发生了三件事：</p><ol><li>确定 <code>this</code>，也称为 <code>this</code> 绑定。</li><li>词法环境（LexicalEnvironment）组件被创建。</li><li>变量环境（VariableEnvironment）组件被创建。</li></ol><p>因此，执行环境在概念上可以表示为：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">ExecutionContext = {  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  ThisBinding = &lt;this value&gt;,  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  LexicalEnvironment = { ... },  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  VariableEnvironment = { ... },  </span></span>\n<span class="line"><span style="color:#A6ACCD;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="this-绑定" tabindex="-1">this 绑定 <a class="header-anchor" href="#this-绑定" aria-hidden="true">#</a></h4><p>在全局环境中，<code>this</code> 指向全局对象，即 <code>window</code> 对象。在函数中，<code>this</code> 只有执行的时候才能确定，取决于函数的调用方式。</p><h4 id="词法环境-lexical-environment" tabindex="-1">词法环境（Lexical Environment） <a class="header-anchor" href="#词法环境-lexical-environment" aria-hidden="true">#</a></h4><p>ES6 文档将词法环境定义为</p><blockquote><p>词法环境是一种规范类型，基于 ECMAScript 代码的词法嵌套结构来定义标识符与特定变量和函数的关联关系。词法环境由环境记录（environment record）和可能为空引用（null）的外部词法环境组成。</p></blockquote><p>也就是说词法环境由两个部分组成：<strong>环境记录</strong>和<strong>对外环境的引用</strong>。</p><ol><li>环境记录：存储变量和函数声明的实际位置。</li><li>对外部环境的引用：可以访问的外部词法环境。</li></ol><p>词法环境有两种类型：</p><ol><li>全局环境：没有外部环境引用的词法环境。它在全局环境中，外部引用环境引用为 <code>null</code>，它拥有一个全局对象（window 对象）及其关联的方法和属性，以及任何用户自定义的全局变量。</li><li>函数环境：用户在函数中定义的变量存储在环境记录中，外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境。</li></ol><p>对于函数环境而言，<strong>环境记录还包含一个 <code>arguments</code> 对象</strong>，该对象包含了索引和传递给函数参数之间的映射以及传递给函数参数的长度（数量）。</p><p>例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// arguments 对象</span></span>\n<span class="line"><span style="color:#FFCB6B;">Arguments</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">: </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">: </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">length</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>词法环境的环境记录也有两种：</p><ol><li>声明性环境记录：存储变量、函数和参数。<strong>一个函数环境包含声明性环境记录</strong>。</li><li>对象环境记录：用于定义在全局执行上下文中出现的变量和函数的关联。<strong>全局环境包含对象环境记录</strong>。</li></ol><p>抽象地说，词法环境在伪代码中开起来像这样：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 全局环境</span></span>\n<span class="line"><span style="color:#A6ACCD;">GlobalExectionContext </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">LexicalEnvironment</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;">// 词法环境</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">EnvironmentRecord</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">// 环境记录</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">Type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Object</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;">// 对象环境记录</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// 标识符绑定在这里 </span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">outer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">null</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">         // 对外环境的引用</span></span>\n<span class="line"><span style="color:#A6ACCD;">  }  </span></span>\n<span class="line"><span style="color:#A6ACCD;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">// 函数环境</span></span>\n<span class="line"><span style="color:#A6ACCD;">FunctionExectionContext = </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  LexicalEnvironment: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">// 词法环境</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">EnvironmentRecord</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;">// 环境记录</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">Type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Declarative</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 声明性环境记录</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// 标识符绑定在这里 </span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">outer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Global</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">or</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">outer</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">environment</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">reference</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> // 对外环境的引用 </span></span>\n<span class="line"><span style="color:#A6ACCD;">  }  </span></span>\n<span class="line"><span style="color:#A6ACCD;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="变量环境" tabindex="-1">变量环境 <a class="header-anchor" href="#变量环境" aria-hidden="true">#</a></h3><p>变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性。</p><p>变量环境的环境记录包含了由 VariableStatements 在此执行上下文创建的绑定。在 ES6 中，LexicalEnvironment 组件和 VariableEnvironment 组件的<strong>区别</strong>在于前者用于存储函数声明和变量（<code>let</code> 和 <code>const</code>）绑定，而后者仅用于存储变量（<code>var</code>）绑定。</p><p>让我们结合一些代码示例来理解上述概念：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">multiply</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">f</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span></span>\n<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">g</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>\n<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">f</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">g</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">multiply</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div><p>这段代码的执行环境如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 全局执行环境</span></span>\n<span class="line"><span style="color:#A6ACCD;">GlobalExectionContext </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">ThisBinding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Global</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  LexicalEnvironment: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">    EnvironmentRecord: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">Type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Object</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// 标识符绑定在这里  </span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt; </span><span style="color:#F07178;">uninitialized</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#A6ACCD;">,  </span></span>\n<span class="line"><span style="color:#A6ACCD;">      b: </span><span style="color:#89DDFF;">&lt; </span><span style="color:#F07178;">uninitialized</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#A6ACCD;">,  </span></span>\n<span class="line"><span style="color:#A6ACCD;">      multiply: </span><span style="color:#89DDFF;">&lt; </span><span style="color:#F07178;">func</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">    }  </span></span>\n<span class="line"><span style="color:#A6ACCD;">    outer: </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">null</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  VariableEnvironment: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">    EnvironmentRecord: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">Type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Object</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// 标识符绑定在这里  </span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined,</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">    outer: </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">null</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  }  </span></span>\n<span class="line"><span style="color:#A6ACCD;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">// 函数执行环境</span></span>\n<span class="line"><span style="color:#A6ACCD;">FunctionExectionContext = </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">   </span></span>\n<span class="line"><span style="color:#A6ACCD;">  ThisBinding: </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Global</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  LexicalEnvironment: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">    EnvironmentRecord: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">Type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Declarative</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// 标识符绑定在这里  </span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">Arguments</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">length</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">    outer: </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">GlobalLexicalEnvironment</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  VariableEnvironment: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">    EnvironmentRecord: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">Type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Declarative</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;">// 标识符绑定在这里  </span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">g</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">    outer: </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">GlobalLexicalEnvironment</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  }  </span></span>\n<span class="line"><span style="color:#A6ACCD;">}</span></span>\n<span class="line"></span></code></pre></div><p>只有在遇到函数 <code>multiply</code> 的调用时才会创建函数执行上下文。</p><p>你可能已经注意到了 <code>let</code> 和 <code>const</code> 定义的变量没有任何与之关联的值，但 <code>var</code> 定义的变量设置为 undefined。</p><p>这是因为在创建阶段，代码会被扫描并解析变量和函数声明，其中函数声明存储在环境中，而变量会被设置为 <code>undefined</code>（在 <code>var</code> 的情况下）或保持未初始化（在 <code>let</code> 和 <code>const</code> 的情况下）。</p><p>这就是为什么你可以在声明之前访问 <code>var</code> 定义的变量（尽管是 <code>undefined</code> ），但如果在声明之前访问 <code>let</code> 和 <code>const</code> 定义的变量就会提示引用错误的原因。</p><p>这就是我们所谓的变量提升。</p><h3 id="执行阶段" tabindex="-1">执行阶段 <a class="header-anchor" href="#执行阶段" aria-hidden="true">#</a></h3><p>这是整篇文章中最简单的部分。在此阶段，完成对所有变量的分配，最后执行代码。</p><p><strong>注意</strong>：在执行阶段，如果 Javascript 引擎在源代码中声明的实际位置找不到 let 变量的值，那么将为其分配 <code>undefined</code> 值。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li><a href="https://book.douban.com/subject/10546125/" target="_blank" rel="noreferrer">JavaScript 高级程序设计（第3版）</a></li><li><a href="https://juejin.im/post/5bdfd3e151882516c6432c32" target="_blank" rel="noreferrer">【译】理解 Javascript 执行上下文和执行栈</a></li></ul>',63);const F=s(r,[["render",function(s,o,e,c,t,r){const F=n("VueJobs");return a(),l("div",null,[D,p(F),y])}]]);export{t as __pageData,F as default};
