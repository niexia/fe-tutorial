import{_ as e,r as i,o as a,c as r,a as t,b as l,d as n,e as s}from"./app.31755bf0.js";const d=JSON.parse('{"title":"关于版本控制","description":"","frontmatter":{},"headers":[{"level":2,"title":"关于版本控制","slug":"关于版本控制-1","link":"#关于版本控制-1","children":[]},{"level":2,"title":"本地版本控制系统","slug":"本地版本控制系统","link":"#本地版本控制系统","children":[]},{"level":2,"title":"集中化的版本控制","slug":"集中化的版本控制","link":"#集中化的版本控制","children":[]},{"level":2,"title":"分布式版本控制","slug":"分布式版本控制","link":"#分布式版本控制","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"frontend-engineering/git/about.md"}'),h={name:"frontend-engineering/git/about.md"},o=l("h1",{id:"关于版本控制",tabindex:"-1"},[n("关于版本控制 "),l("a",{class:"header-anchor",href:"#关于版本控制","aria-hidden":"true"},"#")],-1),p=s('<p>开始学习 Git 之前，先了解一下版本控制一些背景和知识，为什么 Git 会这么流行？</p><h2 id="关于版本控制-1" tabindex="-1">关于版本控制 <a class="header-anchor" href="#关于版本控制-1" aria-hidden="true">#</a></h2><p>什么是版本控制？我们为什么要关心它呢？版本控制是一种记录一个或者若干个文件内容变化，以便将来可以查阅特定版本修订情况的系统。我们不仅可以对软件源码的文件作版本控制，对其他任何类型的文件也可以进行版本控制。</p><p>有了版本控制，你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了某个地方，从而找出导致问题出现的原因，又是谁在某个时间报告了某个功能缺陷等等。使用版本控制通常还意味着，就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。但是额外的工作量微乎其微。</p><p>下面是版本控制的发展过程。</p><h2 id="本地版本控制系统" tabindex="-1">本地版本控制系统 <a class="header-anchor" href="#本地版本控制系统" aria-hidden="true">#</a></h2><p>许多人习惯复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。这么做唯一好处就是简单，但是特别容易犯错。有时候会混淆所在的工作目录，一不小心就会写错文件或者覆盖意外的文件。</p><p>为了解决这个问题就有了本地版本控制系统，大多是采用某种简单的数据库来记录文件的历次更新差异。</p><p>其中就流行的就是 RCS，它的工作原理就是在硬盘上保存补丁集，通过应用所有补丁，可以重新计算各个版本的文件内容。</p><p><img src="/fe-tutorial/assets/git-versionControl-rcs.8082f353.png" alt="RCS"></p><h2 id="集中化的版本控制" tabindex="-1">集中化的版本控制 <a class="header-anchor" href="#集中化的版本控制" aria-hidden="true">#</a></h2><p>本地版本控制明显存在的问题就是不能让不同系统上的开发者协同工作。于是集中化的版本控制系统（Centralized Version Control Systems，简称 CVCS）就应运而生了，有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连接到这台服务器，取出最新的文件或者提交更新。</p><p><img src="/fe-tutorial/assets/git-versionControl-cvcs.e3730ffd.png" alt="CVCS"></p><p>但是这么做显而易见的缺点就是中央服务器的单点故障。如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。如果数据库所在磁盘发生损坏，有没有做备份，你将丢失所有数据——包含整个变更历史，只剩下人们在各自机器上保留的单独快照。</p><h2 id="分布式版本控制" tabindex="-1">分布式版本控制 <a class="header-anchor" href="#分布式版本控制" aria-hidden="true">#</a></h2><p>于是分布式版本控制就诞生了（Distributed Version Control System，简称 DVCS）。客户端不仅仅提取最新版本的文件快照，而是把代码仓库完整地镜像下来，这么一来，任何一处协同工作的服务器发生故障，时候都可以用任何一个镜像出来的本地仓库恢复。每一次克隆，实际上都一次对嗲吗仓库的完整备份。</p><p><img src="/fe-tutorial/assets/git-versionControl-dvcs.8212c7ae.png" alt="DVCS"></p><p>Git 诞生于2005年，它设计的目标是：</p><ul><li>速度</li><li>简单的设计</li><li>对非线性开发模式的强力支持（允许成千上万的个并行开发的分支）</li><li>完全分布式</li><li>有能力高效管理类似于 Linux 内核一样的超大规模项目（速度和数据量）</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" target="_blank" rel="noreferrer">关于版本控制</a></li><li><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-Git-%E7%AE%80%E5%8F%B2" target="_blank" rel="noreferrer">Git 简史</a></li></ul>',21);const c=e(h,[["render",function(e,l,n,s,d,h){const c=i("VueJobs");return a(),r("div",null,[o,t(c),p])}]]);export{d as __pageData,c as default};
