import{_ as s,r as a,o as l,c as n,a as e,b as p,d as o,e as r}from"./app.31755bf0.js";const t=JSON.parse('{"title":"浏览器的渲染过程","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 用户输入","slug":"_1-用户输入","link":"#_1-用户输入","children":[]},{"level":2,"title":"2. URL 请求过程","slug":"_2-url-请求过程","link":"#_2-url-请求过程","children":[]},{"level":2,"title":"3.准备渲染进程","slug":"_3-准备渲染进程","link":"#_3-准备渲染进程","children":[]},{"level":2,"title":"4. 提交文档","slug":"_4-提交文档","link":"#_4-提交文档","children":[]},{"level":2,"title":"5. 进行渲染","slug":"_5-进行渲染","link":"#_5-进行渲染","children":[{"level":3,"title":"构建 DOM 树","slug":"构建-dom-树","link":"#构建-dom-树","children":[]},{"level":3,"title":"样式计算（Recalculate Style）","slug":"样式计算-recalculate-style","link":"#样式计算-recalculate-style","children":[]},{"level":3,"title":"布局阶段","slug":"布局阶段","link":"#布局阶段","children":[]},{"level":3,"title":"分层","slug":"分层","link":"#分层","children":[]},{"level":3,"title":"图层绘制","slug":"图层绘制","link":"#图层绘制","children":[]},{"level":3,"title":"栅格化（raster）","slug":"栅格化-raster","link":"#栅格化-raster","children":[]},{"level":3,"title":"合成和显示","slug":"合成和显示","link":"#合成和显示","children":[]}]},{"level":2,"title":"最后再看看重排和重绘","slug":"最后再看看重排和重绘","link":"#最后再看看重排和重绘","children":[{"level":3,"title":"重排 - 更新了元素的几何属性","slug":"重排-更新了元素的几何属性","link":"#重排-更新了元素的几何属性","children":[]},{"level":3,"title":"重绘 - 更新了元素的绘制属性","slug":"重绘-更新了元素的绘制属性","link":"#重绘-更新了元素的绘制属性","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"javascript/browser/render-process.md"}'),c={name:"javascript/browser/render-process.md"},i=p("h1",{id:"浏览器的渲染过程",tabindex:"-1"},[o("浏览器的渲染过程 "),p("a",{class:"header-anchor",href:"#浏览器的渲染过程","aria-hidden":"true"},"#")],-1),D=r('<p>从输入 URL 到页面展示，这中间发生了什么？从这道面试题开始吧。</p><h2 id="_1-用户输入" tabindex="-1">1. 用户输入 <a class="header-anchor" href="#_1-用户输入" aria-hidden="true">#</a></h2><p>当用户在地址栏中输入一个查询关键字时，地址栏会判断输入的关键字是搜索内容，还是请求的 URL。</p><ul><li>如果是搜索内容，地址栏会使用浏览器默认的搜索引擎，来合成新的带搜索关键字的 URL。</li><li>如果判断输入内容符合 URL 规则，那么地址栏会根据规则，把这段内容加上协议，合成为完整的 URL，如 <code>https://juejin.im/timeline</code>。</li></ul><h2 id="_2-url-请求过程" tabindex="-1">2. URL 请求过程 <a class="header-anchor" href="#_2-url-请求过程" aria-hidden="true">#</a></h2><p>有了完整的 URL，接下来就进入页面的资源请求过程。</p><p>浏览器进程会通过进程间通信（IPC）把 URL 请求发送至网络进程，网络进程接收到 URL 请求后，会在这里发起真正的 URL 请求流程：</p><ol><li>首先，网络进程会查找本地缓存是否缓存了该资源。如果有缓存资源，那么直接返回资源给浏览器进程。如果在缓存中没有查找到资源，那么直接进入网络请求流程。</li><li>请求前的第一步是要进行 DNS 解析，以获取请求域名的服务器 IP 地址；</li><li>接下来，利用 ip 地址和服务器建立 tcp 连接；</li><li>连接建立之后，浏览器端会构建请求行、请求头等信息，并把和该域名相关的 Cookie 等数据附加到请求头中，然后向服务器发送构建的请求信息。</li><li>服务器接收到请求信息后，会根据请求信息生成响应数据（包括响应行、响应头和响应体等信息），并发给网络进程。</li></ol><p>等网络进程接收了响应行和响应头之后，就开始解析响应头的内容了：</p><ol><li>重定向：解析响应头，检查状态码，如果发现返回的状态码是 301 或者 302，那么说明服务器需要浏览器重定向到其他 URL。这时网络进程会从响应头的 Location 字段里面读取重定向的地址。如果是 200，那么表示浏览器可以继续处理该请求。</li><li>200 响应数据类型处理：检查 Content-Type。Content-Type 是 HTTP 头中一个非常重要的字段， 它告诉浏览器服务器返回的响应体数据是什么类型，然后浏览器会根据 Content-Type 的值来决定如何显示响应体的内容。如果是字节流类型，则将该请求提交给下载管理器，该导航流程结束，不再进行后续的渲染，如果是 html 则继续进行导航流程，接下来准备渲染进程。</li></ol><h2 id="_3-准备渲染进程" tabindex="-1">3.准备渲染进程 <a class="header-anchor" href="#_3-准备渲染进程" aria-hidden="true">#</a></h2><p>默认情况下，Chrome 会为每个页面分配一个渲染进程，也就是说，每打开一个新页面就会配套创建一个新的渲染进程。</p><p>如果和之前的页面属于“站点”（形同的协议和根域名），则复用原来的渲染进程。</p><h2 id="_4-提交文档" tabindex="-1">4. 提交文档 <a class="header-anchor" href="#_4-提交文档" aria-hidden="true">#</a></h2><p>渲染进程准备好之后，它就会通知浏览器进程，可以替换当前旧的文档了。具体来说经过几个步骤：</p><ol><li>渲染进程给浏览器发出“提交文档”的消息。告诉浏览器，它准备好了，可以进行解析。</li><li>浏览器收到渲染进程的“提交文档”消息之后，开始清理当前旧文档，并发出“确认提交”的消息给渲染进程。</li><li>当渲染进程接收到“确认提交”消息后，便开始解析数据、下载子资源等后续流程，并实时向浏览器进程更新最新的渲染状态。</li></ol><h2 id="_5-进行渲染" tabindex="-1">5. 进行渲染 <a class="header-anchor" href="#_5-进行渲染" aria-hidden="true">#</a></h2><p>把 HTML、CSS、JavaScript 等数据作为输入，经过渲染模块的处理，最终输出为屏幕上的像素。</p><p>渲染模块在执行过程中会分为很多子节点，接下来看看：</p><h3 id="构建-dom-树" tabindex="-1">构建 DOM 树 <a class="header-anchor" href="#构建-dom-树" aria-hidden="true">#</a></h3><p>无法直接理解和使用 HTML，所以需要将 HTML 转换为浏览器能够理解的结构——DOM 树。</p><p><img src="/fe-tutorial/assets/javascript-browser-render-eg1.a800f184.png" alt="DOM tree"></p><h3 id="样式计算-recalculate-style" tabindex="-1">样式计算（Recalculate Style） <a class="header-anchor" href="#样式计算-recalculate-style" aria-hidden="true">#</a></h3><p>计算出 DOM 节点中每个元素的具体样式，这个阶段大体可分为三步来完成：</p><ol><li>把 CSS 转换为浏览器能够理解的结构，会把获取到的 CSS 文本都转成 styleSheets，可以在控制台输入 <code>document.styleSheets</code> 查看。</li></ol><p><img src="/fe-tutorial/assets/javascript-browser-render-eg2.9f06dab7.png" alt="styleSheets"></p><ol start="2"><li>转换样式表中的属性值，使其标准化：</li></ol><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">body</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20px</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">blue</span><span style="color:#89DDFF;">;}</span></span>\n<span class="line"><span style="color:#FFCB6B;">span</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> none</span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">/* 标准化为 */</span></span>\n<span class="line"><span style="color:#FFCB6B;">body</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20px</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">rgb</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">128</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);}</span></span>\n<span class="line"><span style="color:#FFCB6B;">span</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> none</span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><ol start="3"><li>计算出 DOM 树中每个节点的具体样式</li></ol><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">body</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20px</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">blue</span><span style="color:#89DDFF;">;}</span></span>\n<span class="line"><span style="color:#FFCB6B;">span</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> none</span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">font-weight</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> bold</span><span style="color:#89DDFF;">;</span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">red</span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">green</span><span style="color:#89DDFF;">;}</span></span>\n<span class="line"></span></code></pre></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">重点介绍</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">渲染流程</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">green</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">red</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>那就就会得到这样的树：</p><p><img src="/fe-tutorial/assets/javascript-browser-render-eg3.934f155b.png" alt="CSS tree"></p><h3 id="布局阶段" tabindex="-1">布局阶段 <a class="header-anchor" href="#布局阶段" aria-hidden="true">#</a></h3><p>有 DOM 树和 DOM 树中元素的样式，接下来就要计算可见元素的位置，这就是布局。</p><ol><li>创建布局树，构建一棵只包含可见元素的布局树。</li></ol><p><img src="/fe-tutorial/assets/javascript-browser-render-eg4.7f56b4df.png" alt="layout tree"></p><ol start="2"><li>布局计算，计算布局树中节点的坐标位置，并将计算结果写回到布局树中。</li></ol><h3 id="分层" tabindex="-1">分层 <a class="header-anchor" href="#分层" aria-hidden="true">#</a></h3><p>有了布局树，接下来并不是直接绘制，而是需要先分层。因为页面中有很多复杂的效果，如一些复杂的 3D 变换、页面滚动，或者使用 z-indexing 做 z 轴排序等。为了显示这些效果，需要为特定节点生成专用图层，并生成一棵对应的<strong>图层树</strong>（Layer Tree）。就类似于 PS 中的图层。</p><p><img src="/fe-tutorial/assets/javascript-browser-render-eg5.2792b077.png" alt="Layer Tree"></p><h3 id="图层绘制" tabindex="-1">图层绘制 <a class="header-anchor" href="#图层绘制" aria-hidden="true">#</a></h3><p>在完成图层树的构建之后，渲染引擎会对图层树中的每个图层进行绘制。</p><h3 id="栅格化-raster" tabindex="-1">栅格化（raster） <a class="header-anchor" href="#栅格化-raster" aria-hidden="true">#</a></h3><p>当图层的绘制列表准备好之后，主线程会把该绘制列表提交（commit）给合成线程。</p><p>用户最先看到的页面是视口（viewport）部分，把图层分成块，合成线程会按照视口附近的图块来优先生成位图，实际生成位图的操作是由栅格化来执行的。</p><p><strong>所谓栅格化，是指将图块转换为位图。</strong></p><p>通常栅格化的过程还需要 GPU 加速生成，使用 GPU 生成位图的过程叫做快速栅格化或者 GPU 栅格化。GPU 生成的位图块保存在 GPU 的内存中。</p><h3 id="合成和显示" tabindex="-1">合成和显示 <a class="header-anchor" href="#合成和显示" aria-hidden="true">#</a></h3><p>所有图块都被光栅化，合成线程就会生成一个绘制图块的命令 <code>DrawQuad</code>，然后将该命令提交给浏览器进程。浏览器进程根据 <code>DrawQuad</code> 命令，将页面内容绘制到内存中，最后将内容显示到屏幕上。</p><p>这就是整个完整的流程，从 HTML 到 DOM、样式计算、布局、图层、图层绘制、栅格化、合成和显示。</p><p><img src="/fe-tutorial/assets/javascript-browser-render-eg6.b70f11f8.png" alt="Render"></p><h2 id="最后再看看重排和重绘" tabindex="-1">最后再看看重排和重绘 <a class="header-anchor" href="#最后再看看重排和重绘" aria-hidden="true">#</a></h2><p>重排（reflow)和重绘（repaint）对性能优化有很多的影响，这里理解它们的影响范围，更详细的可以看<a href="https://github.com/niexia/niexia.github.io/issues/40" target="_blank" rel="noreferrer">浏览器的回流和重绘</a>。</p><h3 id="重排-更新了元素的几何属性" tabindex="-1">重排 - 更新了元素的几何属性 <a class="header-anchor" href="#重排-更新了元素的几何属性" aria-hidden="true">#</a></h3><p>通过 JavaScript 或者 CSS 修改元素的几何位置属性，例如改变元素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段，这个过程就叫重排。</p><p><img src="/fe-tutorial/assets/javascript-browser-render-eg7.ffff4529.png" alt="reflow"></p><p>无疑，重排需要更新完整的渲染流水线，所以开销也是最大的。</p><h3 id="重绘-更新了元素的绘制属性" tabindex="-1">重绘 - 更新了元素的绘制属性 <a class="header-anchor" href="#重绘-更新了元素的绘制属性" aria-hidden="true">#</a></h3><p>比如通过 JavaScript 更改某些元素的背景颜色，那么布局阶段将不会被执行，因为并没有引起几何位置的变换，所以就直接进入了绘制阶段，然后执行之后的一系列子阶段，这个过程就叫重绘。</p><p><img src="/fe-tutorial/assets/javascript-browser-render-eg8.16f3f3f6.png" alt="repaint"></p><p>相较于重排操作，重绘省去了布局和分层阶段，所以执行效率会比重排操作要高一些。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li><a href="https://time.geekbang.org/column/article/117637" target="_blank" rel="noreferrer">导航流程：从输入URL到页面展示，这中间发生了什么？</a></li></ul>',64);const y=s(c,[["render",function(s,p,o,r,t,c){const y=a("VueJobs");return l(),n("div",null,[i,e(y),D])}]]);export{t as __pageData,y as default};
