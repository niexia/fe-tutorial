import{_ as e,r as a,o as i,c as l,a as r,b as n,d as t,e as d}from"./app.a6773dcb.js";const s=JSON.parse('{"title":"构建工具介绍","description":"","frontmatter":{},"headers":[{"level":2,"title":"现在的应用开发","slug":"现在的应用开发","link":"#现在的应用开发","children":[]},{"level":2,"title":"构建的演变之路","slug":"构建的演变之路","link":"#构建的演变之路","children":[]},{"level":2,"title":"为什么选择 webpack","slug":"为什么选择-webpack","link":"#为什么选择-webpack","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"frontend-engineering/webpack/about-build-tool.md"}'),c={name:"frontend-engineering/webpack/about-build-tool.md"},h=n("h1",{id:"构建工具介绍",tabindex:"-1"},[t("构建工具介绍 "),n("a",{class:"header-anchor",href:"#构建工具介绍","aria-hidden":"true"},"#")],-1),p=d('<p>在学习 webpack 之前，应该都有疑问，为什么我们需要 webpack 这类的打包构建工具呢？</p><h2 id="现在的应用开发" tabindex="-1">现在的应用开发 <a class="header-anchor" href="#现在的应用开发" aria-hidden="true">#</a></h2><p>现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的 JavaScript 代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法:</p><ul><li>模块化，让我们可以把复杂的程序细化为小的文件</li><li>ES6 更方便、灵活的特性和方法</li><li>scss，less 等 CSS 预处理器</li><li>...</li></ul><p>这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别，而手动处理又是非常繁琐的，这就为 webpack 类的工具的出现提供了需求。</p><h2 id="构建的演变之路" tabindex="-1">构建的演变之路 <a class="header-anchor" href="#构建的演变之路" aria-hidden="true">#</a></h2><p><img src="/fe-tutorial/assets/engineering-webpack-buildTools.ac3a4900.png" alt="build tools"></p><h2 id="为什么选择-webpack" tabindex="-1">为什么选择 webpack <a class="header-anchor" href="#为什么选择-webpack" aria-hidden="true">#</a></h2><p>现在，最流行的就是 webpack 了，和其他构建工具相比，webpack 具有以下几点优势：</p><ul><li>社区生态丰富</li><li>配置灵活和插件化扩展</li><li>官方迭代速度快</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>为什么需要构建工具呢？从当前开发阶段来说，主要有以下几个原因：</p><ul><li>转化 ES6 语法</li><li>转换 JSX</li><li>CSS 前缀补全/预处理器</li><li>压缩混淆</li><li>图片压缩</li></ul>',13);const o=e(c,[["render",function(e,n,t,d,s,c){const o=a("VueJobs");return i(),l("div",null,[h,r(o),p])}]]);export{s as __pageData,o as default};
