import{_ as e,r as a,o as i,c as r,a as l,b as n,d as t,e as d}from"./app.070707c9.js";const c=JSON.parse('{"title":"CDN","description":"","frontmatter":{},"headers":[{"level":2,"title":"CDN 的过程","slug":"cdn-的过程","link":"#cdn-的过程","children":[]},{"level":2,"title":"CDN 优势","slug":"cdn-优势","link":"#cdn-优势","children":[]},{"level":2,"title":"CDN 核心","slug":"cdn-核心","link":"#cdn-核心","children":[]},{"level":2,"title":"CDN & 静态资源","slug":"cdn-静态资源","link":"#cdn-静态资源","children":[]},{"level":2,"title":"CDN 优化细节","slug":"cdn-优化细节","link":"#cdn-优化细节","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"javascript/performance-optimization/CDN.md"}'),o={name:"javascript/performance-optimization/CDN.md"},s=n("h1",{id:"cdn",tabindex:"-1"},[t("CDN "),n("a",{class:"header-anchor",href:"#cdn","aria-hidden":"true"},"#")],-1),h=d('<blockquote><p>CDN （Content Delivery Network，即内容分发网络）指的是一组分布在各个地区的服务器。这些服务器存储着数据的副本，因此服务器可以根据哪些服务器与用户距离最近，来满足数据的请求。 CDN 提供快速服务，较少受高流量影响。</p></blockquote><p>举个例子，在京东上买自营产品的话，它会根据我们的收货地点，在全国范围内找离我们最近、送达最快的仓库，不管我们在江浙沪，还是新疆西藏内蒙古，我们的收货时间都会大大减少。京东的物流体系就类似于 CDN。</p><p>这就是 CDN 的大致原理，即把相关静态资源放到各地的 CDN 服务器。</p><h2 id="cdn-的过程" tabindex="-1">CDN 的过程 <a class="header-anchor" href="#cdn-的过程" aria-hidden="true">#</a></h2><p>CDN 访问的过程主要有：</p><ol><li>首先访问本地的 DNS，如果没有命中，继续递归或者迭代查找，直到命中拿到对应的 IP 地址。</li><li>拿到对应的 IP 地址之后服务器端发送请求到目的地址。注意这里返回的不直接是 cdn 服务器的 IP 地址，<strong>而是全局负载均衡系统的 IP 地址</strong>。</li><li>全局负载均衡系统会根据客户端的 IP 地址和请求的 url 和相应的区域负载均衡系统通信。</li><li>区域负载均衡系统拿着这两个东西获取距离客户端最近且有相应资源的cdn 缓存服务器的地址，返回给全局负载均衡系统。</li><li>全局负载均衡系统返回确定的 cdn 缓存服务器的地址给客户端。</li><li>客户端请求缓存服务器上的文件。</li></ol><p><img src="/fe-tutorial/assets/javascript-effective-CDN.29970f68.png" alt="CDN"></p><h2 id="cdn-优势" tabindex="-1">CDN 优势 <a class="header-anchor" href="#cdn-优势" aria-hidden="true">#</a></h2><ol><li>CDN 节点解决了跨运营商和跨地域访问的问题，访问延时大大降低；</li><li>大部分请求在 CDN 边缘节点完成，CDN 起到了分流作用，减轻了源站的负载；</li><li>降低“广播风暴”的影响，提高网络访问的稳定性；节省骨干网带宽，减少带宽需求量。</li></ol><h2 id="cdn-核心" tabindex="-1">CDN 核心 <a class="header-anchor" href="#cdn-核心" aria-hidden="true">#</a></h2><p>CDN 的核心点有两个: 一个是缓存，一个是回源。</p><p>“缓存”就是将从根服务器请求来的资源按要求缓存。“回源”就是说当有用户访问某个资源的时候，如果被解析到的那个 CDN 节点没有缓存响应的内容，或者是缓存已经到期，就会回源站去获取。没有人访问，CDN 节点不会主动去源站请求资源。</p><h2 id="cdn-静态资源" tabindex="-1">CDN &amp; 静态资源 <a class="header-anchor" href="#cdn-静态资源" aria-hidden="true">#</a></h2><p>静态资源本身具有访问频率高、承接流量大的特点，因此静态资源加载速度始终是前端性能的一个非常关键的指标。CDN 是静态资源提速的重要手段，在许多一线的互联网公司，“静态资源走 CDN”并不是一个建议，而是一个规定。</p><p>比如看一下淘宝：</p><p><img src="/fe-tutorial/assets/javascript-effective-CDN-use.2bc1a8ea.png" alt="CDN"></p><h2 id="cdn-优化细节" tabindex="-1">CDN 优化细节 <a class="header-anchor" href="#cdn-优化细节" aria-hidden="true">#</a></h2><p>我们知道 Cookie 和域名是紧密联系的。即同一个域名下的所有请求，都会携带一个相同的 Cookie（设置不当就会非常大）。</p><p><strong>静态资源往往并不需要 Cookie</strong>。试想，如果我们此刻仅仅是请求一张图片或者一个 CSS 文件，我们也要携带一个 Cookie 跑来跑去（关键是 Cookie 里存储的信息我现在并不需要），这是一件多么劳民伤财的事情。Cookie 虽然小，请求却可以有很多，随着请求的叠加，这样的不必要的 Cookie 带来的开销将是无法想象的……。</p><p>同一个域名下的请求会携带 Cookie，而静态资源往往并不需要 Cookie 携带什么认证信息。把静态资源和主页面置于不同的域名下，完美地避免了不必要的 Cookie 的出现！</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li><a href="https://juejin.im/post/5af46498f265da0b8d41f6a3" target="_blank" rel="noreferrer">关于 cdn、回源等问题一网打尽</a></li><li><a href="https://juejin.im/post/5d1385b25188253dc975b577" target="_blank" rel="noreferrer">CDN 带来这些性能优化</a></li><li><a href="https://juejin.im/book/5b936540f265da0a9624b04b/section/5ba713125188255c9b13b5e9" target="_blank" rel="noreferrer">CDN 的缓存与回源机制解析</a></li></ul>',22);const p=e(o,[["render",function(e,n,t,d,c,o){const p=a("VueJobs");return i(),r("div",null,[s,l(p),h])}]]);export{c as __pageData,p as default};
