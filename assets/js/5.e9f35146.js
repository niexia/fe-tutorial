(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{150:function(t,a,s){t.exports=s.p+"assets/img/javascript-regexp-eg.c11fecb5.png"},151:function(t,a,s){t.exports=s.p+"assets/img/javascript-regexp-exec1.f15b76e4.png"},152:function(t,a,s){t.exports=s.p+"assets/img/javascript-regexp-exec2.a7f1cd31.png"},179:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"正则表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),e("p",[t._v("这部分的原文 "),e("a",{attrs:{href:"https://github.com/ziishaned/learn-regex",target:"_blank",rel:"noopener noreferrer"}},[t._v("learn-regex"),e("OutboundLink")],1),t._v("，作者 "),e("a",{attrs:{href:"https://twitter.com/ziishaned",target:"_blank",rel:"noopener noreferrer"}},[t._v("Zeeshan Ahmad"),e("OutboundLink")],1),t._v("。测试正则表达式可以使用 "),e("a",{attrs:{href:"https://regex101.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("regex101"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("以下做了一点修改和补充。")]),t._v(" "),e("blockquote",[e("p",[t._v("正在表达式是由字母和符号组成的特殊文本，它可以用来从文中找出满足你想要的格式的句子。")])]),t._v(" "),e("p",[t._v("一个正则表达式是一种从左到右匹配主体字符串的模式。 “Regular expression”这个词比较拗口，我们常使用缩写的术语“regex”或“regexp”。 正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等。")]),t._v(" "),e("p",[t._v("想象你正在写一个应用，然后你想设定一个用户命名的规则，让用户名包含字符、数字、下划线和连字符，以及显示字符串的个数，好让名字看起来没那么丑。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(150),alt:"regexp"}})]),t._v(" "),e("p",[t._v("以上正则表达式可以接受 "),e("code",[t._v("john_doe")]),t._v("、"),e("code",[t._v("jo-hn_doe")]),t._v("、"),e("code",[t._v("john12_as")]),t._v("。 但不匹配 "),e("code",[t._v("Jo")]),t._v("，因为它包含了大写的字母而且太短了。")]),t._v(" "),e("h2",{attrs:{id:"基本匹配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本匹配","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本匹配")]),t._v(" "),e("p",[t._v("正则表达式其实就是在执行搜索时的格式，它由一些字母和数字组合而成。例如：一个正则表达式 "),e("code",[t._v("the")]),t._v("，它表示一个规则：由字母 "),e("code",[t._v("t")]),t._v(" 开始，接着是 "),e("code",[t._v("h")]),t._v("，再接着是 "),e("code",[t._v("e")]),t._v("。")]),t._v(" "),e("pre",[t._v('"the" => The fat cat sat on '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("the")])]),t._v(" mat.\n")]),t._v(" "),e("p",[t._v("正则表达式 "),e("code",[t._v("123")]),t._v(" 匹配字符串 "),e("code",[t._v("123")]),t._v(" 。它逐个字符的与输入的正则表达式做比较。")]),t._v(" "),e("p",[t._v("正则表达式是大小写敏感的，所以 "),e("code",[t._v("The")]),t._v(" 不会匹配 "),e("code",[t._v("the")]),t._v("。")]),t._v(" "),e("pre",[t._v('"The" => '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("The")])]),t._v(" fat cat sat on the mat.\n")]),t._v(" "),e("h2",{attrs:{id:"元字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元字符","aria-hidden":"true"}},[t._v("#")]),t._v(" 元字符")]),t._v(" "),e("p",[t._v("正则表达式主要依赖于元字符。元字符不代表它们本身的意思，它们都具有特殊的含义。一些元字符写在方括号中有着特殊的意思。一下是一些元字符的介绍：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("元字符")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v(".")]),t._v(" "),e("td",[t._v("句号匹配任意单个字符除了换行符。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("[ ]")]),t._v(" "),e("td",[t._v("字符种类。匹配方括号内的任意字符。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("[^ ]")]),t._v(" "),e("td",[t._v("否定的字符种类。匹配除了方括号里的任意字符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("*")]),t._v(" "),e("td",[t._v("匹配>=0个重复的在*号之前的字符。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("+")]),t._v(" "),e("td",[t._v("匹配>=1个重复的+号前的字符。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("?")]),t._v(" "),e("td",[t._v("标记?之前的字符为可选.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("{n,m}")]),t._v(" "),e("td",[t._v("匹配num个大括号之前的字符 (n <= num <= m).")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("(xyz)")]),t._v(" "),e("td",[t._v("字符集，匹配与 xyz 完全相等的字符串.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("|")]),t._v(" "),e("td",[t._v("或运算符，匹配符号前或后的字符.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("\\")]),t._v(" "),e("td",[t._v("转义字符,用于匹配一些保留的字符 "),e("code",[t._v("[ ] ( ) { } . * + ? ^ $ \\ |")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("^")]),t._v(" "),e("td",[t._v("从开始行开始匹配.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("$")]),t._v(" "),e("td",[t._v("从末端开始匹配.")])])])]),t._v(" "),e("h3",{attrs:{id:"点运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#点运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 点运算符 "),e("code",[t._v(".")])]),t._v(" "),e("p",[e("code",[t._v(".")]),t._v(" 是元字符中最简单的例子。"),e("code",[t._v(".")]),t._v(" 匹配任意单个字符，但不匹配换行符。例如，表达式 "),e("code",[t._v(".ar")]),t._v(" 匹配一个任意字符后面跟着是 "),e("code",[t._v("a")]),t._v(" 和 "),e("code",[t._v("r")]),t._v(" 的字符串。")]),t._v(" "),e("pre",[t._v('".ar" => The '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("car")])]),t._v(" "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("par")])]),t._v("ked in the "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("gar")])]),t._v("age.\n")]),t._v(" "),e("h3",{attrs:{id:"字符集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符集","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符集")]),t._v(" "),e("p",[t._v("字符集也叫做字符类。方括号用来指定一个字符集，在方括号中使用连字符来指定字符集的范围，在方括号中的字符集不关心顺序。例如，表达式"),e("code",[t._v("[Tt]he")]),t._v(" 匹配 "),e("code",[t._v("the")]),t._v(" 和 "),e("code",[t._v("The")]),t._v("。")]),t._v(" "),e("pre",[t._v('"[Tt]he" => '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("The")])]),t._v(" car parked in "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("the")])]),t._v(" garage.\n")]),t._v(" "),e("p",[t._v("值得注意的是：方括号的句号就表示句号。表达式 "),e("code",[t._v("ar[.]")]),t._v(" 匹配 "),e("code",[t._v("ar.")]),t._v(" 字符串。")]),t._v(" "),e("pre",[t._v('"ar[.]" => A garage is a good place to park a c'),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("ar.")])]),t._v("\n")]),t._v(" "),e("h3",{attrs:{id:"否定字符集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#否定字符集","aria-hidden":"true"}},[t._v("#")]),t._v(" 否定字符集")]),t._v(" "),e("p",[t._v("一般来说 "),e("code",[t._v("^")]),t._v(" 表示一个字符串的开头，但它用在一个方括号的开头的时候，它表示这个字符集是否定的。例如，表达式 "),e("code",[t._v("[^c]ar")]),t._v(" 匹配一个后面跟着 "),e("code",[t._v("ar")]),t._v(" 的除了"),e("code",[t._v("c")]),t._v("的任意字符。")]),t._v(" "),e("pre",[t._v('"[^c]ar" => The car '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("par")])]),t._v("ked in the "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("gar")])]),t._v("age.\n")]),t._v(" "),e("h3",{attrs:{id:"重复次数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重复次数","aria-hidden":"true"}},[t._v("#")]),t._v(" 重复次数")]),t._v(" "),e("p",[t._v("后面跟着元字符 "),e("code",[t._v("+")]),t._v("，"),e("code",[t._v("*")]),t._v(" or "),e("code",[t._v("?")]),t._v(" 的，用来指定匹配子模式的次数。\n这些元字符在不同的情况下有着不同的意思。")]),t._v(" "),e("h4",{attrs:{id:"号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#号","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("*")]),t._v(" 号")]),t._v(" "),e("p",[e("code",[t._v("*")]),t._v(" 号匹配 在 "),e("code",[t._v("*")]),t._v(" 之前的字符出现 "),e("code",[t._v("大于等于0")]),t._v(" 次。例如，表达式 "),e("code",[t._v("a*")]),t._v(" 匹配0或更多个以a开头的字符。表达式 "),e("code",[t._v("[a-z]*")]),t._v(" 匹配一个行中所有以小写字母开头的字符串。")]),t._v(" "),e("pre",[t._v('"[a-z]*" => T'),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("he")])]),t._v(" "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("car")])]),t._v(" "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("parked")])]),t._v(" "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("in")])]),t._v(" "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("the")])]),t._v(" "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("garage")])]),t._v(" #21.\n")]),t._v(" "),e("p",[e("code",[t._v("*")]),t._v(" 字符和 "),e("code",[t._v(".")]),t._v(" 字符搭配可以匹配所有的字符 "),e("code",[t._v(".*")]),t._v("。"),e("code",[t._v("*")]),t._v(" 和表示匹配空格的符号 "),e("code",[t._v("\\s")]),t._v(" 连起来用，如表达式 "),e("code",[t._v("\\s*cat\\s*")]),t._v(" 匹配 0 或更多个空格开头和 0 或更多个空格结尾的 cat 字符串。")]),t._v(" "),e("pre",[t._v('"\\s*cat\\s*" => The fat'),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v(" cat ")])]),t._v("sat on the con"),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("cat")])]),t._v("enation.\n")]),t._v(" "),e("h4",{attrs:{id:"号-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#号-2","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("+")]),t._v(" 号")]),t._v(" "),e("p",[e("code",[t._v("+")]),t._v(" 号匹配 "),e("code",[t._v("+")]),t._v(" 号之前的字符出现 >=1 次。例如表达式 "),e("code",[t._v("c.+t")]),t._v(" 匹配以首字母 "),e("code",[t._v("c")]),t._v(" 开头以 "),e("code",[t._v("t")]),t._v(" 结尾，中间跟着至少一个字符的字符串。")]),t._v(" "),e("pre",[t._v('"c.+t" => The fat '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("cat sat on the mat")])]),t._v(".\n")]),t._v(" "),e("h4",{attrs:{id:"号-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#号-3","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("?")]),t._v(" 号")]),t._v(" "),e("p",[t._v("在正则表达式中元字符 "),e("code",[t._v("?")]),t._v(" 标记在符号前面的字符为可选，即出现 0 或 1 次。例如，表达式 "),e("code",[t._v("[T]?he")]),t._v(" 匹配字符串 "),e("code",[t._v("he")]),t._v(" 和 "),e("code",[t._v("The")]),t._v("。")]),t._v(" "),e("pre",[t._v('"[T]he" => '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("The")])]),t._v(" car is parked in the garage.\n")]),t._v(" "),e("pre",[t._v('"[T]?he" => '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("The")])]),t._v(" car is parked in t"),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("he")])]),t._v(" garage.\n")]),t._v(" "),e("h3",{attrs:{id:"号-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#号-4","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("{}")]),t._v(" 号")]),t._v(" "),e("p",[t._v("在正则表达式中 "),e("code",[t._v("{}")]),t._v(" 是一个量词，常用来一个或一组字符可以重复出现的次数。例如， 表达式 "),e("code",[t._v("[0-9]{2,3}")]),t._v(" 匹配最少 2 位最多 3 位 0~9 的数字。")]),t._v(" "),e("pre",[t._v('"[0-9]{2,3}" => The number was 9.'),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("999")])]),t._v("7 but we rounded it off to "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("10")])]),t._v(".0.\n")]),t._v(" "),e("p",[t._v("我们可以省略第二个参数。例如，"),e("code",[t._v("[0-9]{2,}")]),t._v(" 匹配至少两位 0~9 的数字。")]),t._v(" "),e("pre",[t._v('"[0-9]{2,}" => The number was 9.'),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("9997")])]),t._v(" but we rounded it off to "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("10")])]),t._v(".0.\n")]),t._v(" "),e("p",[t._v("如果逗号也省略掉则表示重复固定的次数。例如，"),e("code",[t._v("[0-9]{3}")]),t._v(" 匹配3位数字")]),t._v(" "),e("pre",[t._v('"[0-9]{2,}" => The number was 9.'),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("9997")])]),t._v(" but we rounded it off to "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("10")])]),t._v(".0.\n")]),t._v(" "),e("p",[t._v("如果逗号也省略掉则表示重复固定的次数。例如，"),e("code",[t._v("[0-9]{3}")]),t._v(" 匹配3位数字")]),t._v(" "),e("pre",[t._v('"[0-9]{3}" => The number was 9.'),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("999")])]),t._v("7 but we rounded it off to 10.0.\n")]),t._v(" "),e("h3",{attrs:{id:"特征标群"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特征标群","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("(...)")]),t._v(" 特征标群")]),t._v(" "),e("p",[t._v("特征标群是一组写在 "),e("code",[t._v("(...)")]),t._v(" 中的子模式。例如之前说的 "),e("code",[t._v("{}")]),t._v(" 是用来表示前面一个字符出现指定次数。但如果在特征标群之后放一个量词，则表示整个标群内的字符重复 N 次。例如，表达式 "),e("code",[t._v("(ab)*")]),t._v(" 匹配连续出现 0 或更多个 "),e("code",[t._v("ab")]),t._v("。")]),t._v(" "),e("p",[t._v("我们还可以在 "),e("code",[t._v("()")]),t._v(" 中用或字符 "),e("code",[t._v("|")]),t._v(" 表示或。例如，"),e("code",[t._v("(c|g|p)ar")]),t._v(" 匹配 "),e("code",[t._v("car")]),t._v(" 或 "),e("code",[t._v("gar")]),t._v(" 或 "),e("code",[t._v("par")]),t._v(".")]),t._v(" "),e("pre",[t._v('"(c|g|p)ar" => The '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("car")])]),t._v(" is "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("par")])]),t._v("ked in the "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("gar")])]),t._v("age.\n")]),t._v(" "),e("h3",{attrs:{id:"或运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#或运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("|")]),t._v(" 或运算符")]),t._v(" "),e("p",[t._v("或运算符就表示或，用作判断条件。例如 "),e("code",[t._v("(T|t)he|car")]),t._v(" 匹配 "),e("code",[t._v("(T|t)he")]),t._v(" 或 "),e("code",[t._v("car")]),t._v("。")]),t._v(" "),e("pre",[t._v('"(T|t)he|car" => '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("The")])]),t._v(" "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("car")])]),t._v(" is parked in "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("the")])]),t._v(" garage.\n")]),t._v(" "),e("h3",{attrs:{id:"转码特殊字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#转码特殊字符","aria-hidden":"true"}},[t._v("#")]),t._v(" 转码特殊字符")]),t._v(" "),e("p",[t._v("反斜线 "),e("code",[t._v("\\")]),t._v(" 在表达式中用于转码紧跟其后的字符。用于指定 "),e("code",[t._v("{ } [ ] / \\ + * . $ ^ | ?")]),t._v(" 这些特殊字符。如果想要匹配这些特殊字符则要在其前面加上反斜线 "),e("code",[t._v("\\")]),t._v("。例如 "),e("code",[t._v(".")]),t._v(" 是用来匹配除换行符外的所有字符的。如果想要匹配句子中的 "),e("code",[t._v(".")]),t._v(" 则要写成 "),e("code",[t._v("\\.")]),t._v(" 以下这个例子 "),e("code",[t._v("\\.?")]),t._v("是选择性匹配"),e("code",[t._v(".")])]),t._v(" "),e("pre",[t._v('"(f|c|m)at\\.?" => The '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("fat")])]),t._v(" "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("cat")])]),t._v(" sat on the "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("mat.")])]),t._v("\n")]),t._v(" "),e("h3",{attrs:{id:"锚点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#锚点","aria-hidden":"true"}},[t._v("#")]),t._v(" 锚点")]),t._v(" "),e("p",[t._v("在正则表达式中，想要匹配指定开头或结尾的字符串就要使用到锚点。"),e("code",[t._v("^")]),t._v(" 指定开头，"),e("code",[t._v("$")]),t._v(" 指定结尾。")]),t._v(" "),e("h4",{attrs:{id:"号-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#号-5","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("^")]),t._v(" 号")]),t._v(" "),e("p",[e("code",[t._v("^")]),t._v(" 用来检查匹配的字符串是否在所匹配字符串的开头。例如，在 "),e("code",[t._v("abc")]),t._v(" 中使用表达式 "),e("code",[t._v("^a")]),t._v(" 会得到结果 "),e("code",[t._v("a")]),t._v("。但如果使用 "),e("code",[t._v("^b")]),t._v(" 将匹配不到任何结果。因为在字符串 "),e("code",[t._v("abc")]),t._v(" 中并不是以 "),e("code",[t._v("b")]),t._v(" 开头。")]),t._v(" "),e("p",[t._v("例如，"),e("code",[t._v("^(T|t)he")]),t._v(" 匹配以 "),e("code",[t._v("The")]),t._v(" 或 "),e("code",[t._v("the")]),t._v(" 开头的字符串。")]),t._v(" "),e("pre",[t._v('"(T|t)he" => '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("The")])]),t._v(" car is parked in "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("the")])]),t._v(" garage.\n")]),t._v(" "),e("pre",[t._v('"^(T|t)he" => '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("The")])]),t._v(" car is parked in the garage.\n")]),t._v(" "),e("h4",{attrs:{id:"号-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#号-6","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("$")]),t._v(" 号")]),t._v(" "),e("p",[t._v("同理于 "),e("code",[t._v("^")]),t._v(" 号，"),e("code",[t._v("$")]),t._v(" 号用来匹配字符是否是最后一个。例如，"),e("code",[t._v("(at\\.)$")]),t._v(" 匹配以 "),e("code",[t._v("at.")]),t._v(" 结尾的字符串。")]),t._v(" "),e("pre",[t._v('"(at\\.)" => The fat c'),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("at.")])]),t._v(" s"),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("at.")])]),t._v(" on the m"),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("at.")])]),t._v("\n")]),t._v(" "),e("pre",[t._v('"(at\\.)$" => The fat cat. sat. on the m'),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("at.")])]),t._v("\n")]),t._v(" "),e("h2",{attrs:{id:"简写字符集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简写字符集","aria-hidden":"true"}},[t._v("#")]),t._v(" 简写字符集")]),t._v(" "),e("p",[t._v("正则表达式提供一些常用的字符集简写。如下:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("简写")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v(".")]),t._v(" "),e("td",[t._v("除换行符外的所有字符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("\\w")]),t._v(" "),e("td",[t._v("匹配所有字母数字，等同于 "),e("code",[t._v("[a-zA-Z0-9_]")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("\\W")]),t._v(" "),e("td",[t._v("匹配所有非字母数字，即符号，等同于： "),e("code",[t._v("[^\\w]")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("\\d")]),t._v(" "),e("td",[t._v("匹配数字： "),e("code",[t._v("[0-9]")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("\\D")]),t._v(" "),e("td",[t._v("匹配非数字： "),e("code",[t._v("[^\\d]")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("\\s")]),t._v(" "),e("td",[t._v("匹配所有空格字符，等同于： "),e("code",[t._v("[\\t\\n\\f\\r\\p{Z}]")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("\\S")]),t._v(" "),e("td",[t._v("匹配所有非空格字符： "),e("code",[t._v("[^\\s]")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("\\f")]),t._v(" "),e("td",[t._v("匹配一个换页符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("\\n")]),t._v(" "),e("td",[t._v("匹配一个换行符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("\\r")]),t._v(" "),e("td",[t._v("匹配一个回车符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("\\t")]),t._v(" "),e("td",[t._v("匹配一个制表符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("\\v")]),t._v(" "),e("td",[t._v("匹配一个垂直制表符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("\\p")]),t._v(" "),e("td",[t._v("匹配 CR/LF（等同于 "),e("code",[t._v("\\r\\n")]),t._v("），用来匹配 DOS 行终止符")])])])]),t._v(" "),e("p",[t._v("其中 "),e("code",[t._v("\\w")]),t._v(" 和 "),e("code",[t._v("\\W")]),t._v("、"),e("code",[t._v("\\d")]),t._v(" 和 "),e("code",[t._v("\\D")]),t._v("、"),e("code",[t._v("\\s")]),t._v(" 和 "),e("code",[t._v("\\S")]),t._v(" 表示的意思相反，"),e("strong",[t._v("自己为了方便记忆，小写表示某种模式，大写表示非某种模式")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"零宽断言（前后预查）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#零宽断言（前后预查）","aria-hidden":"true"}},[t._v("#")]),t._v(" 零宽断言（前后预查）")]),t._v(" "),e("p",[t._v("先行断言和后发断言（也称为 lookaround）都属于"),e("strong",[t._v("非捕获组")]),t._v("（用于匹配模式，但不包括在匹配列表中）。当我们需要一个模式的前面或后面有另一个特定的模式时，就可以使用它们。例如，我们希望从下面的输入字符串 "),e("code",[t._v("$4.44")]),t._v(" 和 "),e("code",[t._v("$10.88")]),t._v(" 中获得所有以 "),e("code",[t._v("$")]),t._v(" 字符开头的数字，我们将使用以下的正则表达式 "),e("code",[t._v("(?<=\\$)[0-9\\.]*")]),t._v("。意思是：获取所有包含 "),e("code",[t._v(".")]),t._v(" 并且前面是 "),e("code",[t._v("$")]),t._v(" 的数字。")]),t._v(" "),e("p",[t._v("下面是正则表达式中使用的零宽断言：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("符号")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("?=")]),t._v(" "),e("td",[t._v("正先行断言-存在")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("?!")]),t._v(" "),e("td",[t._v("负先行断言-排除")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("?<=")]),t._v(" "),e("td",[t._v("正后发断言-存在")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("?<!")]),t._v(" "),e("td",[t._v("负后发断言-排除")])])])]),t._v(" "),e("h3",{attrs:{id:"正先行断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正先行断言","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("?=...")]),t._v(" 正先行断言")]),t._v(" "),e("p",[e("code",[t._v("?=...")]),t._v(" 正先行断言，表示第一部分表达式之后必须跟着 "),e("code",[t._v("?=...")]),t._v(" 定义的表达式。")]),t._v(" "),e("p",[t._v("返回结果只包含满足匹配条件的第一部分表达式。定义一个正先行断言要使用 "),e("code",[t._v("()")]),t._v("，在括号内部使用一个问号和等号： "),e("code",[t._v("(?=...)")]),t._v("。")]),t._v(" "),e("p",[t._v("正先行断言的内容写在括号中的等号后面。例如，表达式 "),e("code",[t._v("(T|t)he(?=\\sfat)")]),t._v(" 匹配 "),e("code",[t._v("The")]),t._v(" 和 "),e("code",[t._v("the")]),t._v("，在括号中我们又定义了正先行断言 "),e("code",[t._v("(?=\\sfat)")]),t._v(" ，即 "),e("code",[t._v("The")]),t._v(" 和 "),e("code",[t._v("the")]),t._v(" 后面紧跟着 "),e("code",[t._v("(空格)fat")]),t._v("。")]),t._v(" "),e("pre",[t._v('"(T|t)he(?=\\sfat)" => '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("The")])]),t._v(" fat cat sat on the mat.\n")]),t._v(" "),e("h3",{attrs:{id:"负先行断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#负先行断言","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("?!...")]),t._v(" 负先行断言")]),t._v(" "),e("p",[t._v("负先行断言 "),e("code",[t._v("?!")]),t._v("  用于筛选所有匹配结果，筛选条件为：其后不跟随着断言中定义的格式。")]),t._v(" "),e("p",[e("code",[t._v("正先行断言")]),t._v("  定义和 "),e("code",[t._v("负先行断言")]),t._v(" 一样，区别就是 "),e("code",[t._v("=")]),t._v(" 替换成 "),e("code",[t._v("!")]),t._v(" 也就是 "),e("code",[t._v("(?!...)")]),t._v("。")]),t._v(" "),e("p",[t._v("例如，表达式 "),e("code",[t._v("(T|t)he(?!\\sfat)")]),t._v(" 匹配 "),e("code",[t._v("The")]),t._v(" 和 "),e("code",[t._v("the")]),t._v("，且其后不跟着 "),e("code",[t._v("(空格)fat")]),t._v("。")]),t._v(" "),e("pre",[t._v('"(T|t)he(?!\\sfat)" => The fat cat sat on '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("the")])]),t._v(" mat.\n")]),t._v(" "),e("h3",{attrs:{id:"正后发断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正后发断言","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("?<= ...")]),t._v(" 正后发断言")]),t._v(" "),e("p",[t._v("正后发断言 记作"),e("code",[t._v("(?<=...)")]),t._v(" 用于筛选所有匹配结果，筛选条件为：其前跟随着断言中定义的格式。")]),t._v(" "),e("p",[t._v("例如，表达式 "),e("code",[t._v("(?<=(T|t)he\\s)(fat|mat)")]),t._v(" 匹配 "),e("code",[t._v("fat")]),t._v(" 和 "),e("code",[t._v("mat")]),t._v("，且其前跟着 "),e("code",[t._v("The")]),t._v(" 或 "),e("code",[t._v("the")]),t._v("。")]),t._v(" "),e("pre",[t._v('"(?<=(T|t)he\\s)(fat|mat)" => The '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("fat")])]),t._v(" cat sat on the "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("mat")])]),t._v(".\n")]),t._v(" "),e("h3",{attrs:{id:"负后发断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#负后发断言","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("?<!...")]),t._v(" 负后发断言")]),t._v(" "),e("p",[t._v("负后发断言 记作 "),e("code",[t._v("(?<!...)")]),t._v(" 用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。")]),t._v(" "),e("p",[t._v("例如，表达式 "),e("code",[t._v("(?<!(T|t)he\\s)(cat)")]),t._v(" 匹配 "),e("code",[t._v("cat")]),t._v("，且其前不跟着 "),e("code",[t._v("The")]),t._v(" 或 "),e("code",[t._v("the")]),t._v("。")]),t._v(" "),e("pre",[t._v('"(?<!(T|t)he\\s)(cat)" => The cat sat on '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("cat")])]),t._v(".\n")]),t._v(" "),e("h2",{attrs:{id:"标志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标志","aria-hidden":"true"}},[t._v("#")]),t._v(" 标志")]),t._v(" "),e("p",[t._v("标志也叫模式修正符，因为它可以用来修改表达式的搜索结果。这些标志可以任意的组合使用，它也是整个正则表达式的一部分。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("标志")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("i")]),t._v(" "),e("td",[t._v("忽略大小写。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("g")]),t._v(" "),e("td",[t._v("全局搜索。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("m")]),t._v(" "),e("td",[t._v("多行修饰符：锚点元字符 "),e("code",[t._v("^")]),t._v(" "),e("code",[t._v("$")]),t._v(" 工作范围在每行的起始。")])])])]),t._v(" "),e("h3",{attrs:{id:"忽略大小写（case-insensitive）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#忽略大小写（case-insensitive）","aria-hidden":"true"}},[t._v("#")]),t._v(" 忽略大小写（Case Insensitive）")]),t._v(" "),e("p",[t._v("修饰语 "),e("code",[t._v("i")]),t._v(" 用于忽略大小写。")]),t._v(" "),e("p",[t._v("例如，表达式 "),e("code",[t._v("/The/gi")]),t._v(" 表示在全局搜索 "),e("code",[t._v("The")]),t._v("，在后面的 "),e("code",[t._v("i")]),t._v(" 将其条件修改为忽略大小写，则变成搜索 "),e("code",[t._v("the")]),t._v(" 和 "),e("code",[t._v("The")]),t._v("，"),e("code",[t._v("g")]),t._v(" 表示全局搜索。")]),t._v(" "),e("pre",[t._v('"The" => '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("The")])]),t._v(" fat cat sat on the mat.\n")]),t._v(" "),e("h3",{attrs:{id:"全局搜索（global-search）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全局搜索（global-search）","aria-hidden":"true"}},[t._v("#")]),t._v(" 全局搜索（Global search）")]),t._v(" "),e("p",[t._v("修饰符 "),e("code",[t._v("g")]),t._v(" 常用于执行一个全局搜索匹配，即（不仅仅返回第一个匹配的，而是返回全部）。")]),t._v(" "),e("p",[t._v("例如，表达式 "),e("code",[t._v("/.(at)/g")]),t._v(" 表示搜索 任意字符（除了换行）+ "),e("code",[t._v("at")]),t._v("，并返回全部结果。")]),t._v(" "),e("pre",[t._v('"/.(at)/" => The '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("fat")])]),t._v(" cat sat on the mat.\n")]),t._v(" "),e("h3",{attrs:{id:"多行修饰符（multiline）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多行修饰符（multiline）","aria-hidden":"true"}},[t._v("#")]),t._v(" 多行修饰符（Multiline）")]),t._v(" "),e("p",[t._v("多行修饰符 "),e("code",[t._v("m")]),t._v(" 常用于执行一个多行匹配。")]),t._v(" "),e("p",[t._v("像之前介绍的 "),e("code",[t._v("(^,$)")]),t._v(" 用于检查格式是否是在待检测字符串的开头或结尾。但我们如果想要它在每行的开头和结尾生效，我们需要用到多行修饰符 "),e("code",[t._v("m")]),t._v("。")]),t._v(" "),e("p",[t._v("例如，表达式 "),e("code",[t._v("/at(.)?$/gm")]),t._v(" 表示小写字符 "),e("code",[t._v("a")]),t._v(" 后跟小写字符 "),e("code",[t._v("t")]),t._v(" ，末尾可选除换行符外任意字符。根据 "),e("code",[t._v("m")]),t._v(" 修饰符，现在表达式匹配每行的结尾。")]),t._v(" "),e("pre",[t._v('"/.at(.)?$/" => The fat\n                cat sat\n                on the '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("mat.")])]),t._v("\n")]),t._v(" "),e("pre",[t._v('"/.at(.)?$/gm" => The '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("fat")])]),t._v("\n                  cat "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("sat")])]),t._v("\n                  on the "),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("mat.")])]),t._v("\n")]),t._v(" "),e("p",[t._v("自己可以通过换行符输入来测试：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/.at(.)?$/gm")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The fat \\r\\n cat sat \\r\\n on the mat."')]),t._v("\nstr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"贪婪匹配与惰性匹配（greedy-vs-lazy-matching）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#贪婪匹配与惰性匹配（greedy-vs-lazy-matching）","aria-hidden":"true"}},[t._v("#")]),t._v(" 贪婪匹配与惰性匹配（Greedy vs lazy matching）")]),t._v(" "),e("p",[t._v("正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 "),e("code",[t._v("?")]),t._v(" 将贪婪匹配模式转化为惰性匹配模式。")]),t._v(" "),e("pre",[t._v('"/(.*at)/" => '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("The fat cat sat on the mat")])]),t._v(". \n")]),t._v(" "),e("pre",[t._v('"/(.*?at)/" => '),e("a",{attrs:{href:"#learn-regex"}},[e("strong",[t._v("The fat")])]),t._v(" cat sat on the mat. \n")]),t._v(" "),e("h1",{attrs:{id:"属性和方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#属性和方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 属性和方法")]),t._v(" "),e("p",[t._v("知道正则表达式的一些概念和使用，接下来看看 RegExp 相关的属性和方法。")]),t._v(" "),e("h2",{attrs:{id:"定义方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定义方式","aria-hidden":"true"}},[t._v("#")]),t._v(" 定义方式")]),t._v(" "),e("p",[t._v("有两种形式定义正则表达式，前面都是以字面量的方式来定义正则表达式。另一种是创建正则表达式的方式是使用 RegExp 构造函数。")]),t._v(" "),e("p",[t._v("RegExp 接受 2 个参数：一个是要匹配的字符串模式，另一个是可选的标识字符。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" type1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/[bc]at/i")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" type2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[bc]at"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("这两个正则表达式是等价的，但是"),e("strong",[t._v("注意")]),t._v("的是，传递给 RegExp 的 2 个参数都是字符串。由于参数模式参数是字符串，所以一些情况下需要进行双重转义。"),e("strong",[t._v("所有的元字符都需要双重转义，那些已经转义过的也需要这样")]),t._v("。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("字面量模式")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("等价的字符串")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("/[bc]at/")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("/\\\\[bc\\\\]at/")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("/.at/")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("/\\.at/")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("/\\d.\\d{1,2}")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("/\\\\d.\\\\d{1,2}")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\w\\\\hell0\\\\123\\")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("\\w\\\\\\\\hell0\\\\\\\\123\\")])])])]),t._v(" "),e("h2",{attrs:{id:"regexp-实例属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#regexp-实例属性","aria-hidden":"true"}},[t._v("#")]),t._v(" RegExp 实例属性")]),t._v(" "),e("p",[t._v("RegExp 的每个实例都具有下列属性，通过这些属性可以取得有关模式的各种信息。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("属性")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("global")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("布尔值，表示是否设置了 g 标志")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("ignoreCase")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("布尔值，表示是否设置了 i 标志")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("multiline")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("布尔值，表示是否设置了 m 标志")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("lastIndex")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("整数，"),e("strong",[t._v("表示开始搜索下一个匹配项的字符位置")]),t._v("，从 0 开始")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("source")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("正则表达式的字符串表示，"),e("strong",[t._v("按照字面量形式")]),t._v("而非传入构造函数的字符串模式返回")])])])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pattern "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\[ab\\]c/i")]),t._v("\n\npattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("global"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false;")]),t._v("\npattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ignoreCase"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true;")]),t._v("\npattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("multiline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false;")]),t._v("\npattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0;")]),t._v("\npattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// /\\[ab\\]c/i;")]),t._v("\n")])])]),e("p",[t._v("这里说明一下 "),e("code",[t._v("lastIndex")]),t._v("，表示开始搜索下一个匹配项的字符位置。也就是说"),e("strong",[t._v("只有正则表达式使用了表示全局检索的 "),e("code",[t._v("g")]),t._v(" 标志时，该属性才会起作用")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pattern1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/a/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pattern2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/b/g")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'this is a large black ball'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 17")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 23")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])])]),e("h2",{attrs:{id:"regexp-实例方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#regexp-实例方法","aria-hidden":"true"}},[t._v("#")]),t._v(" RegExp 实例方法")]),t._v(" "),e("p",[t._v("主要的方法有两个 "),e("code",[t._v("exec()")]),t._v(" 和 "),e("code",[t._v("test()")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"exec"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exec","aria-hidden":"true"}},[t._v("#")]),t._v(" exec")]),t._v(" "),e("p",[e("code",[t._v("exec()")]),t._v(" 专门为"),e("strong",[t._v("捕获组")]),t._v("而设计的。")]),t._v(" "),e("p",[e("code",[t._v("exec")]),t._v(" 接受一个参数，即要应用模式的字符串，然后返回包含第一个匹配项信息的数组，没有任何匹配项时返回 "),e("code",[t._v("null")]),t._v("。")]),t._v(" "),e("p",[t._v("返回的虽然是个数组，但是包含两个额外的属性："),e("code",[t._v("index")]),t._v(" 和 "),e("code",[t._v("input")]),t._v("。")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("index")]),t._v("：表示匹配项在字符串中的位置。")]),t._v(" "),e("li",[e("code",[t._v("input")]),t._v("：表示正在应用正则表达式的字符串。")])]),t._v(" "),e("p",[e("strong",[t._v("在数组中，第一项是整个模式匹配的字符串，其他项是与模式中的捕获组匹配的字符串（如果没有捕获组，则数组只包含一项）")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mom and dad and bady'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pattern "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/mom( and dad( and bady)?)?/gi")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("input"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "mom and dad and bady"')]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "mom and dad and bady"')]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// " and dad and bady"')]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// " and bady"')]),t._v("\n")])])]),e("p",[e("strong",[t._v("注意")]),t._v("："),e("strong",[t._v("对于 "),e("code",[t._v("exec")]),t._v(" 而言，即使子啊模式中设置了全局标志 "),e("code",[t._v("g")]),t._v("，它每次只返回一个匹配项，每次调用 "),e("code",[t._v("exec")]),t._v(" 都会在字符串中继续查找新的匹配项。直至字符串的末尾")]),t._v("在不设置全局标志的情况下，在同一个字符串上多次调用 "),e("code",[t._v("exec")]),t._v(" 始终返回第一个匹配项的信息。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat,bat,eat"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pattern1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/.at/")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pattern1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cat")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pattern1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cat")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat,bat,eat"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pattern2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/.at/g")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pattern2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cat")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pattern2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bat")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 7")]),t._v("\n")])])]),e("h3",{attrs:{id:"exec-和-match-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exec-和-match-的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" exec 和 match 的区别")]),t._v(" "),e("p",[t._v("说到 "),e("code",[t._v("exec()")]),t._v(" 很容易就想到字符串的一个方法 "),e("code",[t._v("match()")]),t._v("，它们之间有什么区别呢？")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat,bat,eat"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pattern "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/.at/")]),t._v("\n\npattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nstr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("strong",[t._v("它们的区别有 2 点：首先这两个方法属于不同的类，另外重要的一点是跟 "),e("code",[t._v("g")]),t._v(" 有关")]),t._v("。")]),t._v(" "),e("ul",[e("li",[t._v("没有 "),e("code",[t._v("g")]),t._v(" 的情况下，它们返回的结果是一致的")]),t._v(" "),e("li",[t._v("设置了 "),e("code",[t._v("g")]),t._v(" 之后，"),e("code",[t._v("exec")]),t._v(" 只返回第一个匹配项，而 "),e("code",[t._v("match")]),t._v(" 会所有匹配项组成的一个数组，同时，返回的数组不再带有 "),e("code",[t._v("index")]),t._v(" 和 "),e("code",[t._v("input")]),t._v(" 属性。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat,bat,eat"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pattern "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/.at/")]),t._v("\n\npattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['cat']")]),t._v("\nstr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['cat']")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:s(151),alt:"regexp-exec1"}})]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat,bat,eat"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pattern "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/.at/g")]),t._v("\n\npattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['cat']")]),t._v("\nstr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['cat','bat,'eat']")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:s(152),alt:"regexp-exec2"}})]),t._v(" "),e("h3",{attrs:{id:"test"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#test","aria-hidden":"true"}},[t._v("#")]),t._v(" test")]),t._v(" "),e("p",[e("code",[t._v("test")]),t._v(" 方法接受一个字符串参数，在模式与该参数匹配的情况下返回 "),e("code",[t._v("true")]),t._v("；否则返回 "),e("code",[t._v("false")]),t._v("。")]),t._v(" "),e("p",[t._v("如果只想知道目标字符串与某个模式是否皮撇，但是不需要知道其文本内容的情况下，使用这个方法很方便。因此 "),e("code",[t._v("test")]),t._v(" 常用来做判断。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0933-2331-9732"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pattern "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\d{4}-\\d{4}-\\d{4}/")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'号码格式正确'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"regexp-构造函数属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#regexp-构造函数属性","aria-hidden":"true"}},[t._v("#")]),t._v(" RegExp 构造函数属性")]),t._v(" "),e("p",[t._v("构造函数也包含一些属性，"),e("strong",[t._v("这些属性使用与作用域内的所有正则表达式，并且基于所执行的最近一次正则表达式操作而变化")]),t._v("。")]),t._v(" "),e("p",[t._v("可以通过两种方式访问这些属性：长属性名和短属性名（Opera 不支持）。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("长属性名")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("短属性名")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("input")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("$_")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("最近一次要匹配的字符串")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("lastMatch")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("$&")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("最近一次匹配项")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("lastParen")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("$+")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("最近一次匹配的捕获组")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("leftContext")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("$`")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("input 字符串中 lastMatch 前面的文本")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("rightContext")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("$'")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("input 字符串中 lastMatch 后面的文本")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("multiline")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("$*")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("布尔值，表示是否所有表达式都是用多行模式。 Chrome 和 IE 都不支持呀...")])])])]),t._v(" "),e("p",[t._v("除了这些属性，还有 9 个用于存储捕获组的构造函数属性："),e("code",[t._v("$1")]),t._v("、"),e("code",[t._v("$2")]),t._v("、...、"),e("code",[t._v("$9")]),t._v("，分别用于存储第一、第二、...、第九个匹配的捕获组。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'this has been a short summer'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pattern "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(.)(h)ort/g")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RegExp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$_"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this has been a short summer")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RegExp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$&"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// short")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RegExp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$+"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// h")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RegExp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$`"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this has been a ")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RegExp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$\'"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// summer")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RegExp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$*"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h1",{attrs:{id:"应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用","aria-hidden":"true"}},[t._v("#")]),t._v(" 应用")]),t._v(" "),e("h2",{attrs:{id:"格式转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#格式转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 格式转换")]),t._v(" "),e("p",[t._v("将'10000000000'形式的字符串，以每3位进行分隔展示'10.000.000.000',多种实现方式")]),t._v(" "),e("ol",[e("li",[t._v("找到到空隙加 "),e("code",[t._v(".")])])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10000000000'")]),t._v("\nstr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\B(?=(\\d{3})+(?!\\d))/g")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("code",[t._v("\\B")]),t._v(" 指定非单词边界；"),e("code",[t._v("(\\d{3})+")]),t._v(" 需要匹配由 3 个数字组成 1 组或多组；"),e("code",[t._v("(?!\\d)")]),t._v(" 负先行断言，后面不能再跟数字；"),e("code",[t._v("(?=(\\d{3})+(?!\\d))")]),t._v(" 正先行断言，后面需要跟随由 3 个数字组成的 1 组或 多组。")]),t._v(" "),e("p",[t._v("所以这里匹配到了 "),e("code",[t._v("10 000 000 000")]),t._v(" 三个空位，把它们替换成 "),e("code",[t._v(".")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("找到数字并在后面加 "),e("code",[t._v(".")])])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10000000000'")]),t._v("\nstr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(\\d)(?=(\\d{3})+\\b)/g")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$1.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或者")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10000000000'")]),t._v("\nstr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\d(?=(\\d{3})+\\b)/g")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$&.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);