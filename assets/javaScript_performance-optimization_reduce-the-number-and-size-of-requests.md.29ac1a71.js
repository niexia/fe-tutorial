import{_ as s,r as a,o as n,c as l,a as p,b as e,d as o,e as c}from"./app.a6773dcb.js";const t=JSON.parse('{"title":"减少请求次数和体积","description":"","frontmatter":{},"headers":[{"level":2,"title":"webpack 要做的优化","slug":"webpack-要做的优化","link":"#webpack-要做的优化","children":[{"level":3,"title":"加快构建速度","slug":"加快构建速度","link":"#加快构建速度","children":[]},{"level":3,"title":"更合理的打包和压缩文件","slug":"更合理的打包和压缩文件","link":"#更合理的打包和压缩文件","children":[]}]},{"level":2,"title":"HTTP 开启压缩","slug":"http-开启压缩","link":"#http-开启压缩","children":[{"level":3,"title":"HTTP 如何支持压缩文件的传输","slug":"http-如何支持压缩文件的传输","link":"#http-如何支持压缩文件的传输","children":[]},{"level":3,"title":"要不要使用 gzip","slug":"要不要使用-gzip","link":"#要不要使用-gzip","children":[]},{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]}]},{"level":2,"title":"图片资源优化","slug":"图片资源优化","link":"#图片资源优化","children":[{"level":3,"title":"二进制位数与色彩的关系","slug":"二进制位数与色彩的关系","link":"#二进制位数与色彩的关系","children":[]},{"level":3,"title":"计算图片大小","slug":"计算图片大小","link":"#计算图片大小","children":[]},{"level":3,"title":"JPEG/JPG","slug":"jpeg-jpg","link":"#jpeg-jpg","children":[]},{"level":3,"title":"PNG-8 与 PNG-24","slug":"png-8-与-png-24","link":"#png-8-与-png-24","children":[]},{"level":3,"title":"SVG","slug":"svg","link":"#svg","children":[]},{"level":3,"title":"Base64","slug":"base64","link":"#base64","children":[]},{"level":3,"title":"WebP","slug":"webp","link":"#webp","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"javaScript/performance-optimization/reduce-the-number-and-size-of-requests.md"}'),r={name:"javaScript/performance-optimization/reduce-the-number-and-size-of-requests.md"},i=e("h1",{id:"减少请求次数和体积",tabindex:"-1"},[o("减少请求次数和体积 "),e("a",{class:"header-anchor",href:"#减少请求次数和体积","aria-hidden":"true"},"#")],-1),D=c('<p>HTTP 连接这一层面的优化才是网络优化的核心，有两大方向：<strong>减少请求次数</strong>和<strong>减少单次请求花费的时间</strong>。</p><p>这两个优化直接对应到了日常开发的操作————资源的压缩和合并，这个一般需要配合打包工具一起。在使用 webpack 的时候我们可以做一些优化。</p><h2 id="webpack-要做的优化" tabindex="-1">webpack 要做的优化 <a class="header-anchor" href="#webpack-要做的优化" aria-hidden="true">#</a></h2><h3 id="加快构建速度" tabindex="-1">加快构建速度 <a class="header-anchor" href="#加快构建速度" aria-hidden="true">#</a></h3><ol><li>不要让 loader 做太多事情</li></ol><p>以 <a href="https://webpack.docschina.org/loaders/babel-loader/" target="_blank" rel="noreferrer">babel-loader</a> 为例，可以配置 <code>exclude</code> 排除特定条件，看一下一个官方的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">module</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">m</span><span style="color:#89DDFF;">?</span><span style="color:#C3E88D;">js</span><span style="color:#89DDFF;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">      exclude</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/(</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">bower_components</span><span style="color:#89DDFF;">)/</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">      use</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        loader</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">babel-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">        options</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">          presets</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@babel/preset-env</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  ]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>这样就避免对 node_modules 文件夹或者 bower_components 文件夹进行处理。</p><p>另外还可以开启缓存 <code>cacheDirectory</code>，设置之后，指定的目录（默认是 <code>node_modules/.cache/babel-loader</code>）将用来缓存 loader 的执行结果。之后的 webpack 构建，将会尝试读取缓存，来避免在每次执行时，可能产生的、高性能消耗的 Babel 重新编译过程(recompilation process)。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#FFCB6B;">module</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">m</span><span style="color:#89DDFF;">?</span><span style="color:#C3E88D;">js</span><span style="color:#89DDFF;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">      exclude</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/(</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">bower_components</span><span style="color:#89DDFF;">)/</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">      use</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">// 或者 loader: &#39;babel-loader?cacheDirectory=true&#39;</span></span>\n<span class="line"><span style="color:#F07178;">        loader</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">babel-loader?cacheDirectory</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">        options</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">          presets</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@babel/preset-env</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  ]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><ol start="2"><li><a href="https://webpack.docschina.org/plugins/dll-plugin/" target="_blank" rel="noreferrer">DllPlugin</a></li></ol><p>第三方库，CommonsChunkPlugin 每次构建时都会重新构建一次 vendor，这样效率就降低了。</p><p>DllPlugin 是基于 Windows 动态链接库（dll）的思想被创作出来的。这个插件会把第三方库单独打包到一个文件中，这个文件就是一个单纯的依赖库。这个依赖库不会跟着你的业务代码一起被重新打包，只有当依赖自身发生版本变化时才会重新打包。</p><ol start="3"><li><a href="https://github.com/amireh/happypack" target="_blank" rel="noreferrer">Happypack</a></li></ol><p>webpack 是单线程的，就算此刻存在多个任务，只能排队一个接一个地等待处理。Happypack 把任务分解给多个子进程去并发执行，大大提高打包效率。</p><p>可以为不同的类型/转换定义多个 HappyPack 插件，只需要给每个插件传递唯一的 <code>id</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// @file webpack.config.js</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> HappyPack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">happypack</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">exports.</span><span style="color:#A6ACCD;">plugins </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HappyPack</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jsx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">threads</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">loaders</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [ </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">babel-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> ]</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HappyPack</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">styles</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">threads</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">loaders</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [ </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">style-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">css-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">less-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> ]</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">exports.</span><span style="color:#A6ACCD;">module</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">js</span><span style="color:#89DDFF;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">use</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">happypack/loader?id=jsx</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">less</span><span style="color:#89DDFF;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">use</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">happypack/loader?id=styles</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">]</span></span>\n<span class="line"></span></code></pre></div><h3 id="更合理的打包和压缩文件" tabindex="-1">更合理的打包和压缩文件 <a class="header-anchor" href="#更合理的打包和压缩文件" aria-hidden="true">#</a></h3><ol><li>拆分资源 <code>CommonsChunkPlugin</code></li><li>通过 <code>Tree-Shaking</code> 删除冗余代码</li><li>使用 <code>UglifyJsPlugin</code> 压缩并删除冗余代码（console、注释等）</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> UglifyJsPlugin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">uglifyjs-webpack-plugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>\n<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">UglifyJsPlugin</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;">// 允许并发</span></span>\n<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#F07178;">parallel</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;">// 开启缓存</span></span>\n<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#F07178;">cache</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#F07178;">compress</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;">// 删除所有的console语句    </span></span>\n<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F07178;">drop_console</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;">// 把使用多次的静态值自动定义为变量</span></span>\n<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F07178;">reduce_vars</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;">// 不保留注释</span></span>\n<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F07178;">comment</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;">// 使输出的代码尽可能紧凑</span></span>\n<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F07178;">beautify</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>\n<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;"> ]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><ol start="4"><li>按需加载</li></ol><p>Vue 构建一个单页应用，用 vue-router 来控制路由，十个路由对应了十个页面。这些页面并不需要一次性加载完，所以可以按需加载。当需要某个页面的时候，再对它进行加载。</p><p>这是一个异步的方法，webpack 在打包时，每个会被单独打成一个文件，只有在我们跳转某个这个路由的时候，才会真正地去获取的内容。这就是按需加载。</p><h2 id="http-开启压缩" tabindex="-1">HTTP 开启压缩 <a class="header-anchor" href="#http-开启压缩" aria-hidden="true">#</a></h2><p>前面是 webpack 的事，日常开发中，还有一个操作就是在 HTTP 请求的时候开启 gzip 压缩。HTTP 压缩就是以缩小体积为目的，对 HTTP 内容进行重新编码的过程。</p><blockquote><p>HTTP 压缩是一种内置到网页服务器和网页客户端中以改进传输速度和带宽利用率的方式。在使用 HTTP 压缩的情况下，HTTP 数据在从服务器发送前就已压缩：兼容的浏览器将在下载所需的格式前宣告支持何种方法给服务器；不支持压缩方法的浏览器将下载未经压缩的数据。最常见的压缩方案包括 gzip 和 Deflate。</p></blockquote><p>gzip 的内核就是 Deflate，目前我们压缩文件用得最多的就是 gzip。可以说，gzip 就是 HTTP 压缩的经典例题。</p><h3 id="http-如何支持压缩文件的传输" tabindex="-1">HTTP 如何支持压缩文件的传输 <a class="header-anchor" href="#http-如何支持压缩文件的传输" aria-hidden="true">#</a></h3><ol><li>浏览器请求数据时，通过 <code>Accept-Encoding</code> 说明自己可以接受的压缩方法</li><li>服务端接收到请求后，选取 <code>Accept-Encoding</code> 中的一种对响应数据进行压缩</li><li>服务端返回响应数据时，在 <code>Content-Encoding</code> 字段中说明数据的压缩方式</li><li>浏览器接收到响应数据后根据 <code>Content-Encoding</code> 对结果进行解压</li></ol><p>注：如果服务器没有对响应数据进行压缩，则不返回Content-Encoding，浏览器也不进行解压</p><h3 id="要不要使用-gzip" tabindex="-1">要不要使用 gzip <a class="header-anchor" href="#要不要使用-gzip" aria-hidden="true">#</a></h3><p>首先要承认 gzip 是高效的，压缩后<strong>通常</strong>能帮我们减少响应 70% 左右的大小。但是也要注意到<strong>服务器压缩 gzip 需要时间，浏览器解压 gzip 也需要时间</strong>，压缩解压的时间和节约的传输时间相比，是否值得？</p><p>如果项目是 1k、2k 的小文件，那不值当，压缩之后大小并没有改变多少。但更多的时候，我们处理的都是具备一定规模的项目文件。实践证明，这种情况下压缩和解压带来的时间开销相对于传输过程中节省下的时间开销来说，可以说是微不足道的。</p><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-hidden="true">#</a></h3><p>Nginx 的 <a href="http://nginx.org/en/docs/http/ngx_http_gzip_module.html" target="_blank" rel="noreferrer">ngx_http_gzip_module</a> 也提供了开启 GZIP 压缩的方式，下面是一个配置：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"># 开启gzip</span></span>\n<span class="line"><span style="color:#A6ACCD;">gzip on;</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;"># 启用gzip压缩的最小文件，小于设置值的文件将不会压缩</span></span>\n<span class="line"><span style="color:#A6ACCD;">gzip_min_length 1k;</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;"># gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明</span></span>\n<span class="line"><span style="color:#A6ACCD;">gzip_comp_level 2;</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;"># 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。</span></span>\n<span class="line"><span style="color:#A6ACCD;">gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript;</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>浏览器在请求资源的时候再 header 里面带上 accept-encoding: gzip 的参数。Nginx 在接收到 Header 之后，发现如果有这个配置，则发送 GZIP 之后的文件（返回的 header 里也包含相关的说明），如果没有则发送源文件。浏览器根据 response header 来处理要不要针对返回的文件进行解压缩然后展示。</p><h2 id="图片资源优化" tabindex="-1">图片资源优化 <a class="header-anchor" href="#图片资源优化" aria-hidden="true">#</a></h2><p>对于图片的“优化”来说，更像是“权衡”。需要对图片进行压缩，但是这个优化，会牺牲一部分图片质量，所以需要找到一个平衡点。图片在项目资源当中，占了一个很大的比重，对图片的优化很关键。</p><p>现在应用较为广泛的 Web 图片格式有 JPEG/JPG、PNG、WebP、Base64、SVG 等，需要知道它们的特点，才能很好的使用他们。</p><h3 id="二进制位数与色彩的关系" tabindex="-1">二进制位数与色彩的关系 <a class="header-anchor" href="#二进制位数与色彩的关系" aria-hidden="true">#</a></h3><p>在计算机中，像素用二进制数来表示。不同的图片格式中像素与二进制位数之间的对应关系是不同的。<strong>一个像素对应的二进制位数越多，它可以表示的颜色种类就越多，成像效果也就越细腻，文件体积相应也会越大</strong>。</p><p>一个二进制位表示两种颜色（0|1 对应黑|白），如果一种图片格式对应的二进制位数有 n 个，那么它就可以呈现 2^n 种颜色。</p><h3 id="计算图片大小" tabindex="-1">计算图片大小 <a class="header-anchor" href="#计算图片大小" aria-hidden="true">#</a></h3><p>对于一张 100 x 100 像素的图片来说，图像上有 10000 个像素点，如果每个像素的值是 RGBA 存储的话，那么也就是说每个像素有 4 个通道，每个通道 1 个字节（8 位 = 1个字节），所以该图片大小大概为 39KB（10000 * 1 * 4 / 1024）。 但是在实际项目中，一张图片可能并不需要使用那么多颜色去显示，我们可以通过减少每个像素的调色板来相应缩小图片的大小。</p><p>所以如何优化图片，有 2 种思路：</p><ul><li>减少像素点。</li><li>减少每个像素点能够显示的颜色。</li></ul><h3 id="jpeg-jpg" tabindex="-1">JPEG/JPG <a class="header-anchor" href="#jpeg-jpg" aria-hidden="true">#</a></h3><ol><li>关键词</li></ol><p>有损压缩、体积小、加载快、不支持透明。</p><ol start="2"><li>特点</li></ol><p>JPG 最大的特点是有损压缩。这种高效的压缩算法使它成为了一种非常轻巧的图片格式。另一方面，即使被称为“有损”压缩，JPG 的压缩方式仍然是一种高质量的压缩方式：当我们把图片体积压缩至原有体积的 50% 以下时，JPG 仍然可以保持住 60% 的品质。</p><p>但是它处理矢量图形和 Logo 等线条感较强、颜色对比强烈的图像时，人为压缩导致的图片模糊会相当明显。此外，JPEG 图像<strong>不支持透明度处理</strong>，透明图片需要召唤 PNG 来呈现。</p><ol start="3"><li>使用场景</li></ol><p>JPG 适用于呈现色彩丰富的图，日常开发中，JPG 图片经常作为大的背景图、轮播图或 Banner 图出现。</p><p><img src="/fe-tutorial/assets/javascript-effective-jpg.fd094233.png" alt="JPG"></p><h3 id="png-8-与-png-24" tabindex="-1">PNG-8 与 PNG-24 <a class="header-anchor" href="#png-8-与-png-24" aria-hidden="true">#</a></h3><ol><li><p>关键词：无损压缩、质量高、体积大、支持透明。</p></li><li><p>特点</p></li></ol><p>PNG是一种无损压缩的高保真的图片格式。8 和 24，这里都是二进制数的位数。按照我们前置知识里提到的对应关系，8 位的 PNG 最多支持 256 种颜色，而 24 位的可以呈现约 1600 万种颜色。PNG 图片具有比 JPG 更强的色彩表现力，对线条的处理更加细腻，对透明度有良好的支持。它弥补了上文我们提到的 JPG 的局限性，<strong>唯一的 BUG 就是体积太大</strong>。</p><ol start="3"><li>使用场景</li></ol><p>考虑到 PNG 在处理线条和颜色对比度方面的优势，主要用它来呈现小的 Logo、颜色简单且对比强烈的图片或背景等。</p><p><img src="/fe-tutorial/assets/javascript-effective-png.56f75a30.png" alt="PNG"></p><h3 id="svg" tabindex="-1">SVG <a class="header-anchor" href="#svg" aria-hidden="true">#</a></h3><ol><li>关键字</li></ol><p>文本文件、体积小、不失真、兼容性好。</p><ol start="2"><li>特点</li></ol><p>SVG（可缩放矢量图形）是一种基于 XML 语法的图像格式。它和本文提及的其它图片种类有着本质的不同：SVG 对图像的处理不是基于像素点，而是是基于对图像的形状描述。</p><p>SVG 与 PNG 和 JPG 相比，文件体积更小，可压缩性更强。更显著的优势还在于图片可无限放大而不失真。</p><p>此外，SVG 是文本文件。我们既可以像写代码一样定义 SVG，把它写在 HTML 里、成为 DOM 的一部分，也可以把对图形的描述写入以 .svg 为后缀的独立文件。</p><p>SVG 的局限性主要有两个方面：一方面是它的渲染成本比较高，这点对性能来说是很不利的。另一方面，SVG 存在着其它图片格式所没有的学习成本（它是可编程的）。</p><h3 id="base64" tabindex="-1">Base64 <a class="header-anchor" href="#base64" aria-hidden="true">#</a></h3><ol><li>关键词</li></ol><p>文本文件、依赖编码、小图标解决方案。</p><ol start="2"><li>特点</li></ol><p>Base64 并非一种图片格式，而是一种编码方式。Base64 和雪碧图一样，是作为小图标解决方案而存在的。</p><p>雪碧图（CSS Sprites）是一种将小图标和背景图像合并到一张图片上，然后利用 CSS 的背景定位来显示其中的每一部分的技术。相较于一个小图标一个图像文件，单独一张图片所需的 HTTP 请求更少，对内存和带宽更加友好。</p><p><img src="/fe-tutorial/assets/javascript-effective-cssSprites.1fd2a29b.png" alt="CSS Sprites"></p><p>和雪碧图一样，Base64 图片的出现，也是为了减少加载网页图片时对服务器的请求次数，从而提升网页性能。</p><p>Base64 是一种用于传输 8Bit 字节码的编码方式，通过对图片进行 Base64 编码，我们可以直接将编码结果写入 HTML 或者写入 CSS，从而减少 HTTP 请求的次数。</p><ol start="3"><li>应用场景</li></ol><p>Base64 主要是处理一些小图片，比如 Logo，可以看一下京东：</p><p><img src="/fe-tutorial/assets/javascript-effective-Base64.e45a8ca1.png" alt="Base64"></p><p>Base64 这么好用，为什么不把大图片也转成 Base64 呢？</p><p>因为，Base64 编码后，图片大小会膨胀为原文件的 <strong>4/3</strong>（这是由 Base64 的编码原理决定的）。如果我们把大图也编码到 HTML 或 CSS 文件中，后者的体积会明显增加，即便我们减少了 HTTP 请求，也无法弥补这庞大的体积带来的性能开销，得不偿失。</p><p>在传输非常小的图片的时候，Base64 带来的文件体积膨胀、以及浏览器解析 Base64 的时间开销，与它节省掉的 HTTP 请求开销相比，可以忽略不计，这时候才能真正体现出它在性能方面的优势。</p><p>因此，Base64 并非万全之策，使用 Base64 一般需要满足以下条件：</p><ul><li>图片的实际尺寸很小（例如不超过 2kb）。</li><li>图片无法以雪碧图的形式与其它小图结合（雪碧图依然是一个减少 HTTP 请求的有效方法，Base64作为补充）。</li><li>图片的更新频率非常低（不需要重复编码和修改文件，方便维护）。</li></ul><p>使用 webpack 的 url-loader 可以方便的将图片转为 Base64。</p><h3 id="webp" tabindex="-1">WebP <a class="header-anchor" href="#webp" aria-hidden="true">#</a></h3><ol><li>关键字</li></ol><p>年轻的全能型选手</p><ol start="2"><li>特点</li></ol><p>WebP 像 JPEG 一样对细节丰富的图片信手拈来，像 PNG 一样支持透明，像 GIF 一样可以显示动态图片——它集多种图片文件格式的优点于一身。但是毕竟年轻，<strong>兼容性</strong>存在一些问题。</p><p><img src="/fe-tutorial/assets/javascript-effective-WebP1.2b2f01d6.png" alt="Webp"></p><ol start="3"><li>应用场景</li></ol><p>WebP 的最大问题不是这个图片是否适合用 WebP，而是浏览器是否支持 WebP。看一下京东也页面：</p><p><img src="/fe-tutorial/assets/javascript-effective-WebP2.4cfee9ef.png" alt="Webp"></p><p>对 WebP 兼容性问题的处理方式就非常有趣，<code>.webp</code> 前面，还跟了一个 <code>.jpg</code> 后缀！</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">Request URL: https://img11.360buyimg.com/vclist/s168x134_jfs/t1/103014/26/2337/15802/5dce86beEd33dc75a/962aa5c322effca1.jpg.webp</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>也就是这个图片应该至少存在 jpg 和 webp 两种格式！程序会根据浏览器的型号、以及该型号是否支持 WebP 这些信息来决定当前浏览器显示的是 <code>.webp</code> 后缀还是 <code>.jpg</code> 后缀。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li><a href="https://juejin.im/post/5b793126f265da43351d5125" target="_blank" rel="noreferrer">简单聊聊 GZIP 的压缩原理与日常应用</a></li><li><a href="https://segmentfault.com/a/1190000012800222" target="_blank" rel="noreferrer">探索HTTP传输中gzip压缩的秘密</a></li><li><a href="https://juejin.im/post/5cb7ee0e51882532fe3440ea" target="_blank" rel="noreferrer">「简明性能优化」双端开启Gzip指南</a></li><li><a href="https://segmentfault.com/a/1190000019897234" target="_blank" rel="noreferrer">你必须懂的前端性能优化</a></li><li><a href="https://juejin.im/book/5b936540f265da0a9624b04b/section/5b98ceb46fb9a05d3154f6bd" target="_blank" rel="noreferrer">图片优化——质量与性能的博弈</a></li></ul>',102);const y=s(r,[["render",function(s,e,o,c,t,r){const y=a("VueJobs");return n(),l("div",null,[i,p(y),D])}]]);export{t as __pageData,y as default};
