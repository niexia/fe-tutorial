import{_ as s,r as a,o as e,c as n,a as l,b as o,d as p,e as t}from"./app.31755bf0.js";const c=JSON.parse('{"title":"如何配置 git 提交规范","description":"","frontmatter":{},"headers":[{"level":2,"title":"选择什么规范","slug":"选择什么规范","link":"#选择什么规范","children":[{"level":3,"title":"header","slug":"header","link":"#header","children":[]},{"level":3,"title":"Body","slug":"body","link":"#body","children":[]},{"level":3,"title":"Footer","slug":"footer","link":"#footer","children":[]},{"level":3,"title":"Revert","slug":"revert","link":"#revert","children":[]}]},{"level":2,"title":"开始配置","slug":"开始配置","link":"#开始配置","children":[]},{"level":2,"title":"替代 git commit","slug":"替代-git-commit","link":"#替代-git-commit","children":[{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]}]},{"level":2,"title":"校验 commit","slug":"校验-commit","link":"#校验-commit","children":[{"level":3,"title":"安装","slug":"安装-1","link":"#安装-1","children":[]},{"level":3,"title":"配置","slug":"配置-1","link":"#配置-1","children":[]}]},{"level":2,"title":"git hook","slug":"git-hook","link":"#git-hook","children":[{"level":3,"title":"安装","slug":"安装-2","link":"#安装-2","children":[]},{"level":3,"title":"配置","slug":"配置-2","link":"#配置-2","children":[]}]},{"level":2,"title":"版本管理","slug":"版本管理","link":"#版本管理","children":[{"level":3,"title":"安装","slug":"安装-3","link":"#安装-3","children":[]},{"level":3,"title":"配置","slug":"配置-3","link":"#配置-3","children":[]},{"level":3,"title":"cli 的使用","slug":"cli-的使用","link":"#cli-的使用","children":[]},{"level":3,"title":"关于版本","slug":"关于版本","link":"#关于版本","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"frontend-engineering/git/config.md"}'),i={name:"frontend-engineering/git/config.md"},r=o("h1",{id:"如何配置-git-提交规范",tabindex:"-1"},[p("如何配置 git 提交规范 "),o("a",{class:"header-anchor",href:"#如何配置-git-提交规范","aria-hidden":"true"},"#")],-1),d=t('<p>git 是现在最流行的版本控制工具，规范 commit message 能大大提高代码维护的效率。但是在日常开发中由于缺少对于 commit message 的约束，导致填写内容随意、质量参差不齐，可读性低亦难以维护。那就考虑在项目中引入 commit message 规范吧。</p><h2 id="选择什么规范" tabindex="-1">选择什么规范 <a class="header-anchor" href="#选择什么规范" aria-hidden="true">#</a></h2><p>现在比较流行的方案是<strong>约定式提交规范</strong>（Conventional Commits），它受到了 Angular 提交准则的启发，并在很大程度上以其为依据。</p><p>约定式提交规范是一种基于提交消息的轻量级约定。它提供了一组用于创建清晰的提交历史的简单规则，这使得编写基于规范的自动化工具变得更容易，这个约定与 semver 相吻合，在提交信息中描述新特性、bug 修复和破坏性变更。</p><p>下面介绍 Angular 规范。它的 message 格式如下:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">// 空一行</span></span>\n<span class="line"><span style="color:#A6ACCD;">&lt;body&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">// 空一行</span></span>\n<span class="line"><span style="color:#A6ACCD;">&lt;footer&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>其中，Header 是必需的，Body 和 Footer 可以省略。</p><h3 id="header" tabindex="-1">header <a class="header-anchor" href="#header" aria-hidden="true">#</a></h3><p>Header 部分只有一行，包括三个字段：</p><ol><li><code>type</code>：必需</li><li><code>scope</code>：可选</li><li><code>subject</code>：必需。</li></ol><h4 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-hidden="true">#</a></h4><p><code>type</code> 用于说明 commit 的类别，常用下面 7 个标识：</p><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul><h4 id="scope" tabindex="-1">scope <a class="header-anchor" href="#scope" aria-hidden="true">#</a></h4><p><code>scope</code> 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><h4 id="subject" tabindex="-1">subject <a class="header-anchor" href="#subject" aria-hidden="true">#</a></h4><p><code>subject</code> 是 commit 目的的简短描述，不超过50个字符。</p><ul><li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</li><li>第一个字母小写</li><li>结尾不加句号（.）</li></ul><h3 id="body" tabindex="-1">Body <a class="header-anchor" href="#body" aria-hidden="true">#</a></h3><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p><p>有两个注意点：</p><ul><li>使用第一人称现在时，比如使用change而不是changed或changes。</li><li>应该说明代码变动的动机，以及与以前行为的对比。</li></ul><h3 id="footer" tabindex="-1">Footer <a class="header-anchor" href="#footer" aria-hidden="true">#</a></h3><p>Footer 部分只用于两种情况。</p><h4 id="不兼容变动" tabindex="-1">不兼容变动 <a class="header-anchor" href="#不兼容变动" aria-hidden="true">#</a></h4><p>如果当前代码与上一个版本不兼容，则 Footer 部分以 BREAKING CHANGE 开头，后面是对变动的描述、以及变动理由和迁移方法。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">BREAKING CHANGE: isolate scope bindings definition has changed.</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">    To migrate the code follow the example below:</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">    Before:</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">    scope: {</span></span>\n<span class="line"><span style="color:#A6ACCD;">      myAttr: &#39;attribute&#39;,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    }</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">    After:</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">    scope: {</span></span>\n<span class="line"><span style="color:#A6ACCD;">      myAttr: &#39;@&#39;,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    }</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">    The removed `inject` wasn&#39;t generaly useful for directives so there should be no code using it.</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="关闭-issue" tabindex="-1">关闭 Issue <a class="header-anchor" href="#关闭-issue" aria-hidden="true">#</a></h4><p>如果当前 commit 针对某个i ssue，那么可以在 Footer 部分关闭这个 issue 。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">Closes #234</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>也可以一次关闭多个 issue 。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">Closes #123, #245, #992</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="revert" tabindex="-1">Revert <a class="header-anchor" href="#revert" aria-hidden="true">#</a></h3><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">revert: feat(pencil): add &#39;graphiteWidth&#39; option</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Body 部分的格式是固定的，必须写成This reverts commit &lt;hash&gt;.，其中的 hash 是被撤销 commit 的 SHA 标识符。</p><p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的 Reverts 小标题下面。</p><h2 id="开始配置" tabindex="-1">开始配置 <a class="header-anchor" href="#开始配置" aria-hidden="true">#</a></h2><p>接下来我们基于选择的规范，结合相关的工具完成项目的配置，保证每一次提交都是按照规范进行的。</p><h2 id="替代-git-commit" tabindex="-1">替代 git commit <a class="header-anchor" href="#替代-git-commit" aria-hidden="true">#</a></h2><ul><li>commitizen/cz-cli: 是一个格式化commit message的工具，可以约束提交者按照制定的规范一步一步的填写commit message。</li><li>cz-conventional-changelog： 为 commitizen 指定一个 Adapter ,一个符合 Angular 团队规范的 preset（按照我们指定的规范帮助我们生成 commit message）</li></ul><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-hidden="true">#</a></h3><p>这里使用的局部安装，也就是仅在项目里配置。也可以全局安装，但配置上会有点不同。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># 局部安装</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm i -D commitizen</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm i -D cz-conventional-changelog</span></span>\n<span class="line"></span></code></pre></div><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-hidden="true">#</a></h3><p>修改在 package.json：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">commit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">git-cz</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">config</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">commitizen</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node_modules/cz-conventional-changelog</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>这样就可以了，现在执行 <code>npm run commit</code> 就出现提示了，如下图:</p><p><img src="/fe-tutorial/assets/engineering-git-commitMessage-step1.93fdfe23.png" alt="commitizen"></p><p>上面直接使用了 <code>cz-conventional-changelog</code> 作为 Adapter，如果需要自定义 Adapter，比如：默认的提交 types 可能特别多，有些时候我们可能只需要其中的某些 type，或者自定义type，那么可以通过 <code>cz-customizable</code>，这里不详细介绍了。</p><h2 id="校验-commit" tabindex="-1">校验 commit <a class="header-anchor" href="#校验-commit" aria-hidden="true">#</a></h2><p>前面已经约束了一套代码提交规范，但是还是有人不按照规范提交代码怎么办呢？需要 commitlint，帮助我们校验commit message，拒绝不符合规范的commit message。</p><ul><li>@commitlint/cli：命令行工具</li><li>@commitlint/config-conventional：校验规则，符合 Angular团队规范（不同于代码规范），当然还有其它规范。</li></ul><h3 id="安装-1" tabindex="-1">安装 <a class="header-anchor" href="#安装-1" aria-hidden="true">#</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm install --save-dev @commitlint/config-conventional @commitlint/cli</span></span>\n<span class="line"></span></code></pre></div><h3 id="配置-1" tabindex="-1">配置 <a class="header-anchor" href="#配置-1" aria-hidden="true">#</a></h3><blockquote><p>Configuration is picked up from commitlint.config.js, .commitlintrc.js, .commitlintrc.json, or .commitlintrc.yml file or a commitlint field in package.json</p></blockquote><p>也就是可以通过多种文件配置，这里，新建了 commitlint.config.js，并添加以下内容：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@commitlint/config-conventional</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>\n<span class="line"><span style="color:#89DDFF;">};</span></span>\n<span class="line"></span></code></pre></div><p><img src="/fe-tutorial/assets/engineering-git-commitMessage-step2.e7fed9a2.png" alt="commitlint"></p><h2 id="git-hook" tabindex="-1">git hook <a class="header-anchor" href="#git-hook" aria-hidden="true">#</a></h2><p>上面已经配置了校验，但是如果提交的时候根据 <code>npm run commit</code> 的提示规范填写，那么就不会通过我们配置好的规范来填写。</p><p>所以还需要 git hook，可以通过 git hook 在 pre-commit 进行 eslint，在 commit-msg 阶段进行 commit message lint。这样即使直接通过 <code>git commit -m &quot;xxx&quot;</code> 也进行格式校验。</p><ul><li>husky：git 钩子变得简单，可以防止错误糟糕的 git 提交，推送等。</li></ul><h3 id="安装-2" tabindex="-1">安装 <a class="header-anchor" href="#安装-2" aria-hidden="true">#</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm install husky --save-dev</span></span>\n<span class="line"></span></code></pre></div><h3 id="配置-2" tabindex="-1">配置 <a class="header-anchor" href="#配置-2" aria-hidden="true">#</a></h3><p>同样的，husky 也支持多种方式配置 .huskyrc、 .huskyrc.json、.huskyrc.js 或者 husky.config.js file。</p><p>这里新建文件 .huskyrc，然后配置内容如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  &quot;hooks&quot;: {</span></span>\n<span class="line"><span style="color:#A6ACCD;">    &quot;commit-msg&quot;: &quot;commitlint -e $GIT_PARAMS&quot;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  }</span></span>\n<span class="line"><span style="color:#A6ACCD;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这样就完成了！</p><p><img src="/fe-tutorial/assets/engineering-git-commitMessage-step3.f45a6228.png" alt="husky"></p><h2 id="版本管理" tabindex="-1">版本管理 <a class="header-anchor" href="#版本管理" aria-hidden="true">#</a></h2><p>以上配置已经可以满足提交代码的常规要求，但是如果我们想自动生成 CHANGELOG，语义化我们的版本，就需要借助 standard-version。</p><ul><li>standard-version：生成 changelog，更新 package.json 和 package.lock.json 中的 version 字段。</li></ul><h3 id="安装-3" tabindex="-1">安装 <a class="header-anchor" href="#安装-3" aria-hidden="true">#</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm install standard-version --save-dev</span></span>\n<span class="line"></span></code></pre></div><h3 id="配置-3" tabindex="-1">配置 <a class="header-anchor" href="#配置-3" aria-hidden="true">#</a></h3><p>修改 package.json 的配置：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">release</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">standard-version</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>执行 <code>npm run release</code> 指令实际执行了五个动作：</p><ul><li>修改 package.json 中的版本号</li><li>修改 package-lock.json 中的版本号</li><li>生成 <a href="http://CHANGELOG.md" target="_blank" rel="noreferrer">CHANGELOG.md</a> 文件</li><li>提交 package.json、package-lock.json、<a href="http://CHANGELOG.md" target="_blank" rel="noreferrer">CHANGELOG.md</a> 文件</li><li>给这次提交记录打上 tag</li></ul><h3 id="cli-的使用" tabindex="-1">cli 的使用 <a class="header-anchor" href="#cli-的使用" aria-hidden="true">#</a></h3><ul><li>发布第一个版本 First Release</li></ul><p>要为你的第一个版本生成 changelog，只需执行以下操作：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm run release -- --first-release</span></span>\n<span class="line"></span></code></pre></div><ul><li>迭代升级 Cutting Releases</li></ul><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm run release</span></span>\n<span class="line"></span></code></pre></div><p>只要你的git commit消息是 conventional 且准确的，你就不再需要指定 semver 类型-你将免费获得 CHANGELOG 生成！</p><ul><li>作为一个预发行版本 Release as a Pre-Release</li></ul><p>使用标志 <code>--prerelease</code> 生成预发布。假设你的代码的最新版本是 <code>1.0.0</code>，并且你要提交的代码已修补了更改。那么执行</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm run release -- --prerelease</span></span>\n<span class="line"></span></code></pre></div><p>这将你的版本标记为 <code>1.0.1-0</code>。</p><p>如果你想命名预发版本，那么可以通过 <code>--prerelease &lt;name&gt;</code> 指定名称。例如，假设你的预发版本应该包含前缀 <code>alpha</code>，那么可以执行</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm run release -- --prerelease alpha</span></span>\n<span class="line"></span></code></pre></div><p>这将标记的版本为 <code>1.0.1-alpha.0</code>。</p><ul><li>强制发布为目标类型 Release as a Target Type Imperatively (npm version-like)</li></ul><p>要放弃自动版本更改，请使用 <code>--release-as</code> 以及参数 <code>major</code>，<code>minor</code> 或 <code>patch</code>。</p><p>假设你代码最新的版本是 <code>1.0.0</code>，你只是完成了一个 <code>fix:</code> 的提交，但是你想下一个版本是一个 <code>minor</code>，很简单，只需要执行一下命令</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm run release -- --release-as minor</span></span>\n<span class="line"><span style="color:#676E95;"># 或者</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm run release -- --release-as 1.1.0</span></span>\n<span class="line"></span></code></pre></div><p>这样你的版本将变为 <code>1.1.0</code>，而不是自动生成的版本号 <code>1.0.1</code>。</p><h3 id="关于版本" tabindex="-1">关于版本 <a class="header-anchor" href="#关于版本" aria-hidden="true">#</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">// 版本</span></span>\n<span class="line"><span style="color:#A6ACCD;">major：主版本号，不兼容的API修改</span></span>\n<span class="line"><span style="color:#A6ACCD;">minor：次版本号，向下兼容，功能性增加</span></span>\n<span class="line"><span style="color:#A6ACCD;">patch：修订号，向下兼容，bug fixed</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">// 版本发布进度</span></span>\n<span class="line"><span style="color:#A6ACCD;">alpha（内测）</span></span>\n<span class="line"><span style="color:#A6ACCD;">beta（公测）</span></span>\n<span class="line"><span style="color:#A6ACCD;">rc （正式版本的候选版本）  Release Candiate</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noreferrer">commitizen</a></li><li><a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noreferrer">commitlint</a></li><li><a href="https://github.com/typicode/husky" target="_blank" rel="noreferrer">husky</a></li><li><a href="https://github.com/conventional-changelog/standard-version" target="_blank" rel="noreferrer">standard-version</a></li><li><a href="https://juejin.im/post/5c85bdde5188257dfa07da6b#heading-9" target="_blank" rel="noreferrer">快速搭建基于angular团队代码提交规范的工作流</a></li><li><a href="https://zhuanlan.zhihu.com/p/69635847" target="_blank" rel="noreferrer">如何配置 Git Commit Message</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noreferrer">Commit message 和 Change log 编写指南</a></li><li><a href="https://juejin.im/post/5d0b3f8c6fb9a07ec07fc5d0" target="_blank" rel="noreferrer">Git commit message 规范</a></li></ul>',105);const h=s(i,[["render",function(s,o,p,t,c,i){const h=a("VueJobs");return e(),n("div",null,[r,l(h),d])}]]);export{c as __pageData,h as default};
